// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.32.0
// source: inventoryRequest.proto

package protos_inventory

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InventoryRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Coids            []string               `protobuf:"bytes,1,rep,name=coids,proto3" json:"coids,omitempty"`
	Warehouses       []*WarehouseListValue  `protobuf:"bytes,2,rep,name=warehouses,proto3" json:"warehouses,omitempty"`
	ReceivedDateMin  *Date                  `protobuf:"bytes,3,opt,name=receivedDateMin,proto3,oneof" json:"receivedDateMin,omitempty"`
	ReceivedDateMax  *Date                  `protobuf:"bytes,4,opt,name=receivedDateMax,proto3,oneof" json:"receivedDateMax,omitempty"`
	DisplayCurrency  string                 `protobuf:"bytes,7,opt,name=displayCurrency,proto3" json:"displayCurrency,omitempty"`
	DisplayWeightUOM string                 `protobuf:"bytes,8,opt,name=displayWeightUOM,proto3" json:"displayWeightUOM,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *InventoryRequest) Reset() {
	*x = InventoryRequest{}
	mi := &file_inventoryRequest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryRequest) ProtoMessage() {}

func (x *InventoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventoryRequest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryRequest.ProtoReflect.Descriptor instead.
func (*InventoryRequest) Descriptor() ([]byte, []int) {
	return file_inventoryRequest_proto_rawDescGZIP(), []int{0}
}

func (x *InventoryRequest) GetCoids() []string {
	if x != nil {
		return x.Coids
	}
	return nil
}

func (x *InventoryRequest) GetWarehouses() []*WarehouseListValue {
	if x != nil {
		return x.Warehouses
	}
	return nil
}

func (x *InventoryRequest) GetReceivedDateMin() *Date {
	if x != nil {
		return x.ReceivedDateMin
	}
	return nil
}

func (x *InventoryRequest) GetReceivedDateMax() *Date {
	if x != nil {
		return x.ReceivedDateMax
	}
	return nil
}

func (x *InventoryRequest) GetDisplayCurrency() string {
	if x != nil {
		return x.DisplayCurrency
	}
	return ""
}

func (x *InventoryRequest) GetDisplayWeightUOM() string {
	if x != nil {
		return x.DisplayWeightUOM
	}
	return ""
}

type WarehouseListValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Coid          string                 `protobuf:"bytes,1,opt,name=coid,proto3" json:"coid,omitempty"`
	WarehouseId   int32                  `protobuf:"varint,2,opt,name=warehouseId,proto3" json:"warehouseId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WarehouseListValue) Reset() {
	*x = WarehouseListValue{}
	mi := &file_inventoryRequest_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WarehouseListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarehouseListValue) ProtoMessage() {}

func (x *WarehouseListValue) ProtoReflect() protoreflect.Message {
	mi := &file_inventoryRequest_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarehouseListValue.ProtoReflect.Descriptor instead.
func (*WarehouseListValue) Descriptor() ([]byte, []int) {
	return file_inventoryRequest_proto_rawDescGZIP(), []int{1}
}

func (x *WarehouseListValue) GetCoid() string {
	if x != nil {
		return x.Coid
	}
	return ""
}

func (x *WarehouseListValue) GetWarehouseId() int32 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

type InventoryResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*InventoryItem       `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InventoryResult) Reset() {
	*x = InventoryResult{}
	mi := &file_inventoryRequest_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryResult) ProtoMessage() {}

func (x *InventoryResult) ProtoReflect() protoreflect.Message {
	mi := &file_inventoryRequest_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryResult.ProtoReflect.Descriptor instead.
func (*InventoryResult) Descriptor() ([]byte, []int) {
	return file_inventoryRequest_proto_rawDescGZIP(), []int{2}
}

func (x *InventoryResult) GetItems() []*InventoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type Date struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          int32                  `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month         int32                  `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Day           int32                  `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Date) Reset() {
	*x = Date{}
	mi := &file_inventoryRequest_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_inventoryRequest_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_inventoryRequest_proto_rawDescGZIP(), []int{3}
}

func (x *Date) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Date) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Date) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

type DecimalValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Units         int64                  `protobuf:"varint,1,opt,name=units,proto3" json:"units,omitempty"`  // Whole units part of the amount
	Nanos         int32                  `protobuf:"fixed32,2,opt,name=nanos,proto3" json:"nanos,omitempty"` // Nano units of the amount (10^-9). Must be same sign as units
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecimalValue) Reset() {
	*x = DecimalValue{}
	mi := &file_inventoryRequest_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecimalValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecimalValue) ProtoMessage() {}

func (x *DecimalValue) ProtoReflect() protoreflect.Message {
	mi := &file_inventoryRequest_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecimalValue.ProtoReflect.Descriptor instead.
func (*DecimalValue) Descriptor() ([]byte, []int) {
	return file_inventoryRequest_proto_rawDescGZIP(), []int{4}
}

func (x *DecimalValue) GetUnits() int64 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *DecimalValue) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

type InventoryItem struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Coid                   *string                `protobuf:"bytes,1,opt,name=coid,proto3,oneof" json:"coid,omitempty"`
	ExRateSummary          *string                `protobuf:"bytes,2,opt,name=ex_rate_summary,json=exRateSummary,proto3,oneof" json:"ex_rate_summary,omitempty"`
	Branch                 *string                `protobuf:"bytes,3,opt,name=branch,proto3,oneof" json:"branch,omitempty"`
	StkItemId              *int32                 `protobuf:"varint,4,opt,name=stk_item_id,json=stkItemId,proto3,oneof" json:"stk_item_id,omitempty"`
	ProductCode            *string                `protobuf:"bytes,5,opt,name=product_code,json=productCode,proto3,oneof" json:"product_code,omitempty"`
	ProductCategory        *string                `protobuf:"bytes,6,opt,name=product_category,json=productCategory,proto3,oneof" json:"product_category,omitempty"`
	ProductSize            *string                `protobuf:"bytes,7,opt,name=product_size,json=productSize,proto3,oneof" json:"product_size,omitempty"`
	ProductCondition       *string                `protobuf:"bytes,8,opt,name=product_condition,json=productCondition,proto3,oneof" json:"product_condition,omitempty"`
	ProductGrade           *string                `protobuf:"bytes,9,opt,name=product_grade,json=productGrade,proto3,oneof" json:"product_grade,omitempty"`
	ProductSpec            *string                `protobuf:"bytes,10,opt,name=product_spec,json=productSpec,proto3,oneof" json:"product_spec,omitempty"`
	OutsideDiameter        *DecimalValue          `protobuf:"bytes,11,opt,name=outside_diameter,json=outsideDiameter,proto3,oneof" json:"outside_diameter,omitempty"`
	InsideDiameter         *DecimalValue          `protobuf:"bytes,12,opt,name=inside_diameter,json=insideDiameter,proto3,oneof" json:"inside_diameter,omitempty"`
	TheoWgt                *DecimalValue          `protobuf:"bytes,13,opt,name=theo_wgt,json=theoWgt,proto3,oneof" json:"theo_wgt,omitempty"`
	TheoWgtPerFoot         *DecimalValue          `protobuf:"bytes,14,opt,name=theo_wgt_per_foot,json=theoWgtPerFoot,proto3,oneof" json:"theo_wgt_per_foot,omitempty"`
	Mill                   *string                `protobuf:"bytes,15,opt,name=mill,proto3,oneof" json:"mill,omitempty"`
	CountryOfMatlOrigin    *string                `protobuf:"bytes,16,opt,name=country_of_matl_origin,json=countryOfMatlOrigin,proto3,oneof" json:"country_of_matl_origin,omitempty"`
	Heat                   *string                `protobuf:"bytes,17,opt,name=heat,proto3,oneof" json:"heat,omitempty"`
	WhsCode                *string                `protobuf:"bytes,18,opt,name=whs_code,json=whsCode,proto3,oneof" json:"whs_code,omitempty"`
	WhsName                *string                `protobuf:"bytes,19,opt,name=whs_name,json=whsName,proto3,oneof" json:"whs_name,omitempty"`
	WhsBu                  *string                `protobuf:"bytes,20,opt,name=whs_bu,json=whsBu,proto3,oneof" json:"whs_bu,omitempty"`
	BuCountry              *string                `protobuf:"bytes,21,opt,name=bu_country,json=buCountry,proto3,oneof" json:"bu_country,omitempty"`
	ParentWhs              *string                `protobuf:"bytes,22,opt,name=parent_whs,json=parentWhs,proto3,oneof" json:"parent_whs,omitempty"`
	MasterWhs              *string                `protobuf:"bytes,23,opt,name=master_whs,json=masterWhs,proto3,oneof" json:"master_whs,omitempty"`
	Tag                    *string                `protobuf:"bytes,24,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	ParentTag              *string                `protobuf:"bytes,25,opt,name=parent_tag,json=parentTag,proto3,oneof" json:"parent_tag,omitempty"`
	MasterTag              *string                `protobuf:"bytes,26,opt,name=master_tag,json=masterTag,proto3,oneof" json:"master_tag,omitempty"`
	StkHoldCode            *string                `protobuf:"bytes,27,opt,name=stk_hold_code,json=stkHoldCode,proto3,oneof" json:"stk_hold_code,omitempty"`
	StkHoldReason          *string                `protobuf:"bytes,28,opt,name=stk_hold_reason,json=stkHoldReason,proto3,oneof" json:"stk_hold_reason,omitempty"`
	StkHoldUser            *string                `protobuf:"bytes,29,opt,name=stk_hold_user,json=stkHoldUser,proto3,oneof" json:"stk_hold_user,omitempty"`
	StkHoldDesc            *string                `protobuf:"bytes,30,opt,name=stk_hold_desc,json=stkHoldDesc,proto3,oneof" json:"stk_hold_desc,omitempty"`
	StkHoldDate            *Date                  `protobuf:"bytes,31,opt,name=stk_hold_date,json=stkHoldDate,proto3,oneof" json:"stk_hold_date,omitempty"`
	CustomerNumber         *string                `protobuf:"bytes,32,opt,name=customer_number,json=customerNumber,proto3,oneof" json:"customer_number,omitempty"`
	CustomerName           *string                `protobuf:"bytes,33,opt,name=customer_name,json=customerName,proto3,oneof" json:"customer_name,omitempty"`
	PartNumber             *string                `protobuf:"bytes,34,opt,name=part_number,json=partNumber,proto3,oneof" json:"part_number,omitempty"`
	StkLocation            *string                `protobuf:"bytes,35,opt,name=stk_location,json=stkLocation,proto3,oneof" json:"stk_location,omitempty"`
	StkRemarks             *string                `protobuf:"bytes,36,opt,name=stk_remarks,json=stkRemarks,proto3,oneof" json:"stk_remarks,omitempty"`
	RejectReason           *string                `protobuf:"bytes,37,opt,name=reject_reason,json=rejectReason,proto3,oneof" json:"reject_reason,omitempty"`
	RejectDesc             *string                `protobuf:"bytes,38,opt,name=reject_desc,json=rejectDesc,proto3,oneof" json:"reject_desc,omitempty"`
	TransientType          *string                `protobuf:"bytes,39,opt,name=transient_type,json=transientType,proto3,oneof" json:"transient_type,omitempty"`
	TransientRef           *string                `protobuf:"bytes,40,opt,name=transient_ref,json=transientRef,proto3,oneof" json:"transient_ref,omitempty"`
	StkOwnership           *string                `protobuf:"bytes,41,opt,name=stk_ownership,json=stkOwnership,proto3,oneof" json:"stk_ownership,omitempty"`
	ForCustomerNumber      *string                `protobuf:"bytes,42,opt,name=for_customer_number,json=forCustomerNumber,proto3,oneof" json:"for_customer_number,omitempty"`
	ForCustomerName        *string                `protobuf:"bytes,43,opt,name=for_customer_name,json=forCustomerName,proto3,oneof" json:"for_customer_name,omitempty"`
	StkStatus              *string                `protobuf:"bytes,44,opt,name=stk_status,json=stkStatus,proto3,oneof" json:"stk_status,omitempty"`
	ProductStatus          *string                `protobuf:"bytes,45,opt,name=product_status,json=productStatus,proto3,oneof" json:"product_status,omitempty"`
	TestSpec1              *string                `protobuf:"bytes,46,opt,name=test_spec1,json=testSpec1,proto3,oneof" json:"test_spec1,omitempty"`
	PoNumber               *int32                 `protobuf:"varint,47,opt,name=po_number,json=poNumber,proto3,oneof" json:"po_number,omitempty"`
	PoItem                 *int32                 `protobuf:"varint,48,opt,name=po_item,json=poItem,proto3,oneof" json:"po_item,omitempty"`
	ProductDesc            *string                `protobuf:"bytes,49,opt,name=product_desc,json=productDesc,proto3,oneof" json:"product_desc,omitempty"`
	ProductSizeDesc        *string                `protobuf:"bytes,50,opt,name=product_size_desc,json=productSizeDesc,proto3,oneof" json:"product_size_desc,omitempty"`
	MetalType              *string                `protobuf:"bytes,51,opt,name=metal_type,json=metalType,proto3,oneof" json:"metal_type,omitempty"`
	MetalType2             *string                `protobuf:"bytes,52,opt,name=metal_type2,json=metalType2,proto3,oneof" json:"metal_type2,omitempty"`
	CreatedRefPrefix       *string                `protobuf:"bytes,53,opt,name=created_ref_prefix,json=createdRefPrefix,proto3,oneof" json:"created_ref_prefix,omitempty"`
	CreatedRefNo           *int32                 `protobuf:"varint,54,opt,name=created_ref_no,json=createdRefNo,proto3,oneof" json:"created_ref_no,omitempty"`
	CreatedRefItem         *DecimalValue          `protobuf:"bytes,55,opt,name=created_ref_item,json=createdRefItem,proto3,oneof" json:"created_ref_item,omitempty"`
	VendorNo               *string                `protobuf:"bytes,56,opt,name=vendor_no,json=vendorNo,proto3,oneof" json:"vendor_no,omitempty"`
	VendorName             *string                `protobuf:"bytes,57,opt,name=vendor_name,json=vendorName,proto3,oneof" json:"vendor_name,omitempty"`
	PoCategory             *string                `protobuf:"bytes,58,opt,name=po_category,json=poCategory,proto3,oneof" json:"po_category,omitempty"`
	PoCategoryDesc         *string                `protobuf:"bytes,59,opt,name=po_category_desc,json=poCategoryDesc,proto3,oneof" json:"po_category_desc,omitempty"`
	PoType                 *string                `protobuf:"bytes,60,opt,name=po_type,json=poType,proto3,oneof" json:"po_type,omitempty"`
	PoTypeDesc             *string                `protobuf:"bytes,61,opt,name=po_type_desc,json=poTypeDesc,proto3,oneof" json:"po_type_desc,omitempty"`
	WhsType                *string                `protobuf:"bytes,62,opt,name=whs_type,json=whsType,proto3,oneof" json:"whs_type,omitempty"`
	WhsTypeDesc            *string                `protobuf:"bytes,63,opt,name=whs_type_desc,json=whsTypeDesc,proto3,oneof" json:"whs_type_desc,omitempty"`
	SupplierRef            *string                `protobuf:"bytes,64,opt,name=supplier_ref,json=supplierRef,proto3,oneof" json:"supplier_ref,omitempty"`
	ProductControlsCode    *string                `protobuf:"bytes,65,opt,name=product_controls_code,json=productControlsCode,proto3,oneof" json:"product_controls_code,omitempty"`
	ProductControlsDesc    *string                `protobuf:"bytes,66,opt,name=product_controls_desc,json=productControlsDesc,proto3,oneof" json:"product_controls_desc,omitempty"`
	Batch                  *string                `protobuf:"bytes,67,opt,name=batch,proto3,oneof" json:"batch,omitempty"`
	CusSpec                *string                `protobuf:"bytes,68,opt,name=cus_spec,json=cusSpec,proto3,oneof" json:"cus_spec,omitempty"`
	TreatmentNumber        *string                `protobuf:"bytes,69,opt,name=treatment_number,json=treatmentNumber,proto3,oneof" json:"treatment_number,omitempty"`
	OtherNumber            *string                `protobuf:"bytes,70,opt,name=other_number,json=otherNumber,proto3,oneof" json:"other_number,omitempty"`
	SpecCondition          *string                `protobuf:"bytes,71,opt,name=spec_condition,json=specCondition,proto3,oneof" json:"spec_condition,omitempty"`
	Abc                    *string                `protobuf:"bytes,72,opt,name=abc,proto3,oneof" json:"abc,omitempty"`
	MillHeatLotNo          *string                `protobuf:"bytes,73,opt,name=mill_heat_lot_no,json=millHeatLotNo,proto3,oneof" json:"mill_heat_lot_no,omitempty"`
	StratRank              *string                `protobuf:"bytes,74,opt,name=strat_rank,json=stratRank,proto3,oneof" json:"strat_rank,omitempty"`
	ProductSuperItem       *string                `protobuf:"bytes,75,opt,name=product_super_item,json=productSuperItem,proto3,oneof" json:"product_super_item,omitempty"`
	Length                 *DecimalValue          `protobuf:"bytes,76,opt,name=length,proto3,oneof" json:"length,omitempty"`
	LengthOh               *DecimalValue          `protobuf:"bytes,77,opt,name=length_oh,json=lengthOh,proto3,oneof" json:"length_oh,omitempty"`
	LengthAlloc            *DecimalValue          `protobuf:"bytes,78,opt,name=length_alloc,json=lengthAlloc,proto3,oneof" json:"length_alloc,omitempty"`
	LengthAvl              *DecimalValue          `protobuf:"bytes,79,opt,name=length_avl,json=lengthAvl,proto3,oneof" json:"length_avl,omitempty"`
	WgtOhBase              *DecimalValue          `protobuf:"bytes,80,opt,name=wgt_oh_base,json=wgtOhBase,proto3,oneof" json:"wgt_oh_base,omitempty"`
	WgtAllocBase           *DecimalValue          `protobuf:"bytes,81,opt,name=wgt_alloc_base,json=wgtAllocBase,proto3,oneof" json:"wgt_alloc_base,omitempty"`
	WgtAvlBase             *DecimalValue          `protobuf:"bytes,82,opt,name=wgt_avl_base,json=wgtAvlBase,proto3,oneof" json:"wgt_avl_base,omitempty"`
	WgtOhDisplay           *DecimalValue          `protobuf:"bytes,83,opt,name=wgt_oh_display,json=wgtOhDisplay,proto3,oneof" json:"wgt_oh_display,omitempty"`
	WgtAllocDisplay        *DecimalValue          `protobuf:"bytes,84,opt,name=wgt_alloc_display,json=wgtAllocDisplay,proto3,oneof" json:"wgt_alloc_display,omitempty"`
	WgtAvlDisplay          *DecimalValue          `protobuf:"bytes,85,opt,name=wgt_avl_display,json=wgtAvlDisplay,proto3,oneof" json:"wgt_avl_display,omitempty"`
	PcsOh                  *int32                 `protobuf:"varint,86,opt,name=pcs_oh,json=pcsOh,proto3,oneof" json:"pcs_oh,omitempty"`
	PcsAlloc               *int32                 `protobuf:"varint,87,opt,name=pcs_alloc,json=pcsAlloc,proto3,oneof" json:"pcs_alloc,omitempty"`
	PcsAvl                 *int32                 `protobuf:"varint,88,opt,name=pcs_avl,json=pcsAvl,proto3,oneof" json:"pcs_avl,omitempty"`
	QtyOh                  *DecimalValue          `protobuf:"bytes,89,opt,name=qty_oh,json=qtyOh,proto3,oneof" json:"qty_oh,omitempty"`
	QtyAlloc               *DecimalValue          `protobuf:"bytes,90,opt,name=qty_alloc,json=qtyAlloc,proto3,oneof" json:"qty_alloc,omitempty"`
	QtyAvl                 *DecimalValue          `protobuf:"bytes,91,opt,name=qty_avl,json=qtyAvl,proto3,oneof" json:"qty_avl,omitempty"`
	UnitValueBase          *DecimalValue          `protobuf:"bytes,92,opt,name=unit_value_base,json=unitValueBase,proto3,oneof" json:"unit_value_base,omitempty"`
	UnitValueDisplay       *DecimalValue          `protobuf:"bytes,93,opt,name=unit_value_display,json=unitValueDisplay,proto3,oneof" json:"unit_value_display,omitempty"`
	OrigMatlCostBase       *DecimalValue          `protobuf:"bytes,94,opt,name=orig_matl_cost_base,json=origMatlCostBase,proto3,oneof" json:"orig_matl_cost_base,omitempty"`
	OrigPrdnCostBase       *DecimalValue          `protobuf:"bytes,95,opt,name=orig_prdn_cost_base,json=origPrdnCostBase,proto3,oneof" json:"orig_prdn_cost_base,omitempty"`
	OrigFrgtCostBase       *DecimalValue          `protobuf:"bytes,96,opt,name=orig_frgt_cost_base,json=origFrgtCostBase,proto3,oneof" json:"orig_frgt_cost_base,omitempty"`
	OrigMiscCostBase       *DecimalValue          `protobuf:"bytes,97,opt,name=orig_misc_cost_base,json=origMiscCostBase,proto3,oneof" json:"orig_misc_cost_base,omitempty"`
	OrigSurchCostBase      *DecimalValue          `protobuf:"bytes,98,opt,name=orig_surch_cost_base,json=origSurchCostBase,proto3,oneof" json:"orig_surch_cost_base,omitempty"`
	OrigTotalCostOhBase    *DecimalValue          `protobuf:"bytes,99,opt,name=orig_total_cost_oh_base,json=origTotalCostOhBase,proto3,oneof" json:"orig_total_cost_oh_base,omitempty"`
	OrigMatlCostDisplay    *DecimalValue          `protobuf:"bytes,100,opt,name=orig_matl_cost_display,json=origMatlCostDisplay,proto3,oneof" json:"orig_matl_cost_display,omitempty"`
	OrigPrdnCostDisplay    *DecimalValue          `protobuf:"bytes,101,opt,name=orig_prdn_cost_display,json=origPrdnCostDisplay,proto3,oneof" json:"orig_prdn_cost_display,omitempty"`
	OrigFrgtCostDisplay    *DecimalValue          `protobuf:"bytes,102,opt,name=orig_frgt_cost_display,json=origFrgtCostDisplay,proto3,oneof" json:"orig_frgt_cost_display,omitempty"`
	OrigMiscCostDisplay    *DecimalValue          `protobuf:"bytes,103,opt,name=orig_misc_cost_display,json=origMiscCostDisplay,proto3,oneof" json:"orig_misc_cost_display,omitempty"`
	OrigSurchCostDisplay   *DecimalValue          `protobuf:"bytes,104,opt,name=orig_surch_cost_display,json=origSurchCostDisplay,proto3,oneof" json:"orig_surch_cost_display,omitempty"`
	OrigTotalCostDisplay   *DecimalValue          `protobuf:"bytes,105,opt,name=orig_total_cost_display,json=origTotalCostDisplay,proto3,oneof" json:"orig_total_cost_display,omitempty"`
	MatlCostPerWgtBase     *DecimalValue          `protobuf:"bytes,106,opt,name=matl_cost_per_wgt_base,json=matlCostPerWgtBase,proto3,oneof" json:"matl_cost_per_wgt_base,omitempty"`
	PrdnCostPerWgtBase     *DecimalValue          `protobuf:"bytes,107,opt,name=prdn_cost_per_wgt_base,json=prdnCostPerWgtBase,proto3,oneof" json:"prdn_cost_per_wgt_base,omitempty"`
	TransCostPerWgtBase    *DecimalValue          `protobuf:"bytes,108,opt,name=trans_cost_per_wgt_base,json=transCostPerWgtBase,proto3,oneof" json:"trans_cost_per_wgt_base,omitempty"`
	MiscCostPerWgtBase     *DecimalValue          `protobuf:"bytes,109,opt,name=misc_cost_per_wgt_base,json=miscCostPerWgtBase,proto3,oneof" json:"misc_cost_per_wgt_base,omitempty"`
	SurchCostPerWgtBase    *DecimalValue          `protobuf:"bytes,110,opt,name=surch_cost_per_wgt_base,json=surchCostPerWgtBase,proto3,oneof" json:"surch_cost_per_wgt_base,omitempty"`
	TotalCostPerWgtBase    *DecimalValue          `protobuf:"bytes,111,opt,name=total_cost_per_wgt_base,json=totalCostPerWgtBase,proto3,oneof" json:"total_cost_per_wgt_base,omitempty"`
	MatlCostPerWgtDisplay  *DecimalValue          `protobuf:"bytes,112,opt,name=matl_cost_per_wgt_display,json=matlCostPerWgtDisplay,proto3,oneof" json:"matl_cost_per_wgt_display,omitempty"`
	PrdnCostPerWgtDisplay  *DecimalValue          `protobuf:"bytes,113,opt,name=prdn_cost_per_wgt_display,json=prdnCostPerWgtDisplay,proto3,oneof" json:"prdn_cost_per_wgt_display,omitempty"`
	TransCostPerWgtDisplay *DecimalValue          `protobuf:"bytes,114,opt,name=trans_cost_per_wgt_display,json=transCostPerWgtDisplay,proto3,oneof" json:"trans_cost_per_wgt_display,omitempty"`
	MiscCostPerWgtDisplay  *DecimalValue          `protobuf:"bytes,115,opt,name=misc_cost_per_wgt_display,json=miscCostPerWgtDisplay,proto3,oneof" json:"misc_cost_per_wgt_display,omitempty"`
	SurchCostPerWgtDisplay *DecimalValue          `protobuf:"bytes,116,opt,name=surch_cost_per_wgt_display,json=surchCostPerWgtDisplay,proto3,oneof" json:"surch_cost_per_wgt_display,omitempty"`
	TotalCostPerWgtDisplay *DecimalValue          `protobuf:"bytes,117,opt,name=total_cost_per_wgt_display,json=totalCostPerWgtDisplay,proto3,oneof" json:"total_cost_per_wgt_display,omitempty"`
	MatlValueOhBase        *DecimalValue          `protobuf:"bytes,118,opt,name=matl_value_oh_base,json=matlValueOhBase,proto3,oneof" json:"matl_value_oh_base,omitempty"`
	TransValueOhBase       *DecimalValue          `protobuf:"bytes,119,opt,name=trans_value_oh_base,json=transValueOhBase,proto3,oneof" json:"trans_value_oh_base,omitempty"`
	PrdnValueOhBase        *DecimalValue          `protobuf:"bytes,120,opt,name=prdn_value_oh_base,json=prdnValueOhBase,proto3,oneof" json:"prdn_value_oh_base,omitempty"`
	MiscValueOhBase        *DecimalValue          `protobuf:"bytes,121,opt,name=misc_value_oh_base,json=miscValueOhBase,proto3,oneof" json:"misc_value_oh_base,omitempty"`
	SurchValueOhBase       *DecimalValue          `protobuf:"bytes,122,opt,name=surch_value_oh_base,json=surchValueOhBase,proto3,oneof" json:"surch_value_oh_base,omitempty"`
	TotalValueOhBase       *DecimalValue          `protobuf:"bytes,123,opt,name=total_value_oh_base,json=totalValueOhBase,proto3,oneof" json:"total_value_oh_base,omitempty"`
	MatlValueOhDisplay     *DecimalValue          `protobuf:"bytes,124,opt,name=matl_value_oh_display,json=matlValueOhDisplay,proto3,oneof" json:"matl_value_oh_display,omitempty"`
	TransValueOhDisplay    *DecimalValue          `protobuf:"bytes,125,opt,name=trans_value_oh_display,json=transValueOhDisplay,proto3,oneof" json:"trans_value_oh_display,omitempty"`
	PrdnValueOhDisplay     *DecimalValue          `protobuf:"bytes,126,opt,name=prdn_value_oh_display,json=prdnValueOhDisplay,proto3,oneof" json:"prdn_value_oh_display,omitempty"`
	MiscValueOhDisplay     *DecimalValue          `protobuf:"bytes,127,opt,name=misc_value_oh_display,json=miscValueOhDisplay,proto3,oneof" json:"misc_value_oh_display,omitempty"`
	SurchValueOhDisplay    *DecimalValue          `protobuf:"bytes,128,opt,name=surch_value_oh_display,json=surchValueOhDisplay,proto3,oneof" json:"surch_value_oh_display,omitempty"`
	TotalValueOhDisplay    *DecimalValue          `protobuf:"bytes,129,opt,name=total_value_oh_display,json=totalValueOhDisplay,proto3,oneof" json:"total_value_oh_display,omitempty"`
	MatlValueAllocBase     *DecimalValue          `protobuf:"bytes,130,opt,name=matl_value_alloc_base,json=matlValueAllocBase,proto3,oneof" json:"matl_value_alloc_base,omitempty"`
	TransValueAllocBase    *DecimalValue          `protobuf:"bytes,131,opt,name=trans_value_alloc_base,json=transValueAllocBase,proto3,oneof" json:"trans_value_alloc_base,omitempty"`
	PrdnValueAllocBase     *DecimalValue          `protobuf:"bytes,132,opt,name=prdn_value_alloc_base,json=prdnValueAllocBase,proto3,oneof" json:"prdn_value_alloc_base,omitempty"`
	MiscValueAllocBase     *DecimalValue          `protobuf:"bytes,133,opt,name=misc_value_alloc_base,json=miscValueAllocBase,proto3,oneof" json:"misc_value_alloc_base,omitempty"`
	SurchValueAllocBase    *DecimalValue          `protobuf:"bytes,134,opt,name=surch_value_alloc_base,json=surchValueAllocBase,proto3,oneof" json:"surch_value_alloc_base,omitempty"`
	TotalValueAllocBase    *DecimalValue          `protobuf:"bytes,135,opt,name=total_value_alloc_base,json=totalValueAllocBase,proto3,oneof" json:"total_value_alloc_base,omitempty"`
	MatlValueAllocDisplay  *DecimalValue          `protobuf:"bytes,136,opt,name=matl_value_alloc_display,json=matlValueAllocDisplay,proto3,oneof" json:"matl_value_alloc_display,omitempty"`
	TransValueAllocDisplay *DecimalValue          `protobuf:"bytes,137,opt,name=trans_value_alloc_display,json=transValueAllocDisplay,proto3,oneof" json:"trans_value_alloc_display,omitempty"`
	PrdnValueAllocDisplay  *DecimalValue          `protobuf:"bytes,138,opt,name=prdn_value_alloc_display,json=prdnValueAllocDisplay,proto3,oneof" json:"prdn_value_alloc_display,omitempty"`
	MiscValueAllocDisplay  *DecimalValue          `protobuf:"bytes,139,opt,name=misc_value_alloc_display,json=miscValueAllocDisplay,proto3,oneof" json:"misc_value_alloc_display,omitempty"`
	SurchValueAllocDisplay *DecimalValue          `protobuf:"bytes,140,opt,name=surch_value_alloc_display,json=surchValueAllocDisplay,proto3,oneof" json:"surch_value_alloc_display,omitempty"`
	TotalValueAllocDisplay *DecimalValue          `protobuf:"bytes,141,opt,name=total_value_alloc_display,json=totalValueAllocDisplay,proto3,oneof" json:"total_value_alloc_display,omitempty"`
	MatlValueAvlBase       *DecimalValue          `protobuf:"bytes,142,opt,name=matl_value_avl_base,json=matlValueAvlBase,proto3,oneof" json:"matl_value_avl_base,omitempty"`
	TransValueAvlBase      *DecimalValue          `protobuf:"bytes,143,opt,name=trans_value_avl_base,json=transValueAvlBase,proto3,oneof" json:"trans_value_avl_base,omitempty"`
	PrdnValueAvlBase       *DecimalValue          `protobuf:"bytes,144,opt,name=prdn_value_avl_base,json=prdnValueAvlBase,proto3,oneof" json:"prdn_value_avl_base,omitempty"`
	MiscValueAvlBase       *DecimalValue          `protobuf:"bytes,145,opt,name=misc_value_avl_base,json=miscValueAvlBase,proto3,oneof" json:"misc_value_avl_base,omitempty"`
	SurchValueAvlBase      *DecimalValue          `protobuf:"bytes,146,opt,name=surch_value_avl_base,json=surchValueAvlBase,proto3,oneof" json:"surch_value_avl_base,omitempty"`
	TotalValueAvlBase      *DecimalValue          `protobuf:"bytes,147,opt,name=total_value_avl_base,json=totalValueAvlBase,proto3,oneof" json:"total_value_avl_base,omitempty"`
	MatlValueAvlDisplay    *DecimalValue          `protobuf:"bytes,148,opt,name=matl_value_avl_display,json=matlValueAvlDisplay,proto3,oneof" json:"matl_value_avl_display,omitempty"`
	TransValueAvlDisplay   *DecimalValue          `protobuf:"bytes,149,opt,name=trans_value_avl_display,json=transValueAvlDisplay,proto3,oneof" json:"trans_value_avl_display,omitempty"`
	PrdnValueAvlDisplay    *DecimalValue          `protobuf:"bytes,150,opt,name=prdn_value_avl_display,json=prdnValueAvlDisplay,proto3,oneof" json:"prdn_value_avl_display,omitempty"`
	MiscValueAvlDisplay    *DecimalValue          `protobuf:"bytes,151,opt,name=misc_value_avl_display,json=miscValueAvlDisplay,proto3,oneof" json:"misc_value_avl_display,omitempty"`
	SurchValueAvlDisplay   *DecimalValue          `protobuf:"bytes,152,opt,name=surch_value_avl_display,json=surchValueAvlDisplay,proto3,oneof" json:"surch_value_avl_display,omitempty"`
	TotalValueAvlDisplay   *DecimalValue          `protobuf:"bytes,153,opt,name=total_value_avl_display,json=totalValueAvlDisplay,proto3,oneof" json:"total_value_avl_display,omitempty"`
	PoPcsOrdered           *int32                 `protobuf:"varint,154,opt,name=po_pcs_ordered,json=poPcsOrdered,proto3,oneof" json:"po_pcs_ordered,omitempty"`
	PoPcsAlloc             *int32                 `protobuf:"varint,155,opt,name=po_pcs_alloc,json=poPcsAlloc,proto3,oneof" json:"po_pcs_alloc,omitempty"`
	PoPcsDelivered         *int32                 `protobuf:"varint,156,opt,name=po_pcs_delivered,json=poPcsDelivered,proto3,oneof" json:"po_pcs_delivered,omitempty"`
	PoPcsBalance           *DecimalValue          `protobuf:"bytes,157,opt,name=po_pcs_balance,json=poPcsBalance,proto3,oneof" json:"po_pcs_balance,omitempty"`
	PoQtyOrdered           *DecimalValue          `protobuf:"bytes,158,opt,name=po_qty_ordered,json=poQtyOrdered,proto3,oneof" json:"po_qty_ordered,omitempty"`
	PoQtyAllocated         *DecimalValue          `protobuf:"bytes,159,opt,name=po_qty_allocated,json=poQtyAllocated,proto3,oneof" json:"po_qty_allocated,omitempty"`
	PoQtyDelivered         *DecimalValue          `protobuf:"bytes,160,opt,name=po_qty_delivered,json=poQtyDelivered,proto3,oneof" json:"po_qty_delivered,omitempty"`
	PoQtyBalance           *DecimalValue          `protobuf:"bytes,161,opt,name=po_qty_balance,json=poQtyBalance,proto3,oneof" json:"po_qty_balance,omitempty"`
	PoWgtOrderedBase       *DecimalValue          `protobuf:"bytes,162,opt,name=po_wgt_ordered_base,json=poWgtOrderedBase,proto3,oneof" json:"po_wgt_ordered_base,omitempty"`
	PoWgtOrderedDisplay    *DecimalValue          `protobuf:"bytes,163,opt,name=po_wgt_ordered_display,json=poWgtOrderedDisplay,proto3,oneof" json:"po_wgt_ordered_display,omitempty"`
	PoWgtAllocBase         *DecimalValue          `protobuf:"bytes,164,opt,name=po_wgt_alloc_base,json=poWgtAllocBase,proto3,oneof" json:"po_wgt_alloc_base,omitempty"`
	PoWgtAllocDisplay      *DecimalValue          `protobuf:"bytes,165,opt,name=po_wgt_alloc_display,json=poWgtAllocDisplay,proto3,oneof" json:"po_wgt_alloc_display,omitempty"`
	PoWgtDeliveredBase     *DecimalValue          `protobuf:"bytes,166,opt,name=po_wgt_delivered_base,json=poWgtDeliveredBase,proto3,oneof" json:"po_wgt_delivered_base,omitempty"`
	PoWgtDeliveredDisplay  *DecimalValue          `protobuf:"bytes,167,opt,name=po_wgt_delivered_display,json=poWgtDeliveredDisplay,proto3,oneof" json:"po_wgt_delivered_display,omitempty"`
	PoWgtBalanceBase       *DecimalValue          `protobuf:"bytes,168,opt,name=po_wgt_balance_base,json=poWgtBalanceBase,proto3,oneof" json:"po_wgt_balance_base,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *InventoryItem) Reset() {
	*x = InventoryItem{}
	mi := &file_inventoryRequest_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryItem) ProtoMessage() {}

func (x *InventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_inventoryRequest_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryItem.ProtoReflect.Descriptor instead.
func (*InventoryItem) Descriptor() ([]byte, []int) {
	return file_inventoryRequest_proto_rawDescGZIP(), []int{5}
}

func (x *InventoryItem) GetCoid() string {
	if x != nil && x.Coid != nil {
		return *x.Coid
	}
	return ""
}

func (x *InventoryItem) GetExRateSummary() string {
	if x != nil && x.ExRateSummary != nil {
		return *x.ExRateSummary
	}
	return ""
}

func (x *InventoryItem) GetBranch() string {
	if x != nil && x.Branch != nil {
		return *x.Branch
	}
	return ""
}

func (x *InventoryItem) GetStkItemId() int32 {
	if x != nil && x.StkItemId != nil {
		return *x.StkItemId
	}
	return 0
}

func (x *InventoryItem) GetProductCode() string {
	if x != nil && x.ProductCode != nil {
		return *x.ProductCode
	}
	return ""
}

func (x *InventoryItem) GetProductCategory() string {
	if x != nil && x.ProductCategory != nil {
		return *x.ProductCategory
	}
	return ""
}

func (x *InventoryItem) GetProductSize() string {
	if x != nil && x.ProductSize != nil {
		return *x.ProductSize
	}
	return ""
}

func (x *InventoryItem) GetProductCondition() string {
	if x != nil && x.ProductCondition != nil {
		return *x.ProductCondition
	}
	return ""
}

func (x *InventoryItem) GetProductGrade() string {
	if x != nil && x.ProductGrade != nil {
		return *x.ProductGrade
	}
	return ""
}

func (x *InventoryItem) GetProductSpec() string {
	if x != nil && x.ProductSpec != nil {
		return *x.ProductSpec
	}
	return ""
}

func (x *InventoryItem) GetOutsideDiameter() *DecimalValue {
	if x != nil {
		return x.OutsideDiameter
	}
	return nil
}

func (x *InventoryItem) GetInsideDiameter() *DecimalValue {
	if x != nil {
		return x.InsideDiameter
	}
	return nil
}

func (x *InventoryItem) GetTheoWgt() *DecimalValue {
	if x != nil {
		return x.TheoWgt
	}
	return nil
}

func (x *InventoryItem) GetTheoWgtPerFoot() *DecimalValue {
	if x != nil {
		return x.TheoWgtPerFoot
	}
	return nil
}

func (x *InventoryItem) GetMill() string {
	if x != nil && x.Mill != nil {
		return *x.Mill
	}
	return ""
}

func (x *InventoryItem) GetCountryOfMatlOrigin() string {
	if x != nil && x.CountryOfMatlOrigin != nil {
		return *x.CountryOfMatlOrigin
	}
	return ""
}

func (x *InventoryItem) GetHeat() string {
	if x != nil && x.Heat != nil {
		return *x.Heat
	}
	return ""
}

func (x *InventoryItem) GetWhsCode() string {
	if x != nil && x.WhsCode != nil {
		return *x.WhsCode
	}
	return ""
}

func (x *InventoryItem) GetWhsName() string {
	if x != nil && x.WhsName != nil {
		return *x.WhsName
	}
	return ""
}

func (x *InventoryItem) GetWhsBu() string {
	if x != nil && x.WhsBu != nil {
		return *x.WhsBu
	}
	return ""
}

func (x *InventoryItem) GetBuCountry() string {
	if x != nil && x.BuCountry != nil {
		return *x.BuCountry
	}
	return ""
}

func (x *InventoryItem) GetParentWhs() string {
	if x != nil && x.ParentWhs != nil {
		return *x.ParentWhs
	}
	return ""
}

func (x *InventoryItem) GetMasterWhs() string {
	if x != nil && x.MasterWhs != nil {
		return *x.MasterWhs
	}
	return ""
}

func (x *InventoryItem) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *InventoryItem) GetParentTag() string {
	if x != nil && x.ParentTag != nil {
		return *x.ParentTag
	}
	return ""
}

func (x *InventoryItem) GetMasterTag() string {
	if x != nil && x.MasterTag != nil {
		return *x.MasterTag
	}
	return ""
}

func (x *InventoryItem) GetStkHoldCode() string {
	if x != nil && x.StkHoldCode != nil {
		return *x.StkHoldCode
	}
	return ""
}

func (x *InventoryItem) GetStkHoldReason() string {
	if x != nil && x.StkHoldReason != nil {
		return *x.StkHoldReason
	}
	return ""
}

func (x *InventoryItem) GetStkHoldUser() string {
	if x != nil && x.StkHoldUser != nil {
		return *x.StkHoldUser
	}
	return ""
}

func (x *InventoryItem) GetStkHoldDesc() string {
	if x != nil && x.StkHoldDesc != nil {
		return *x.StkHoldDesc
	}
	return ""
}

func (x *InventoryItem) GetStkHoldDate() *Date {
	if x != nil {
		return x.StkHoldDate
	}
	return nil
}

func (x *InventoryItem) GetCustomerNumber() string {
	if x != nil && x.CustomerNumber != nil {
		return *x.CustomerNumber
	}
	return ""
}

func (x *InventoryItem) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *InventoryItem) GetPartNumber() string {
	if x != nil && x.PartNumber != nil {
		return *x.PartNumber
	}
	return ""
}

func (x *InventoryItem) GetStkLocation() string {
	if x != nil && x.StkLocation != nil {
		return *x.StkLocation
	}
	return ""
}

func (x *InventoryItem) GetStkRemarks() string {
	if x != nil && x.StkRemarks != nil {
		return *x.StkRemarks
	}
	return ""
}

func (x *InventoryItem) GetRejectReason() string {
	if x != nil && x.RejectReason != nil {
		return *x.RejectReason
	}
	return ""
}

func (x *InventoryItem) GetRejectDesc() string {
	if x != nil && x.RejectDesc != nil {
		return *x.RejectDesc
	}
	return ""
}

func (x *InventoryItem) GetTransientType() string {
	if x != nil && x.TransientType != nil {
		return *x.TransientType
	}
	return ""
}

func (x *InventoryItem) GetTransientRef() string {
	if x != nil && x.TransientRef != nil {
		return *x.TransientRef
	}
	return ""
}

func (x *InventoryItem) GetStkOwnership() string {
	if x != nil && x.StkOwnership != nil {
		return *x.StkOwnership
	}
	return ""
}

func (x *InventoryItem) GetForCustomerNumber() string {
	if x != nil && x.ForCustomerNumber != nil {
		return *x.ForCustomerNumber
	}
	return ""
}

func (x *InventoryItem) GetForCustomerName() string {
	if x != nil && x.ForCustomerName != nil {
		return *x.ForCustomerName
	}
	return ""
}

func (x *InventoryItem) GetStkStatus() string {
	if x != nil && x.StkStatus != nil {
		return *x.StkStatus
	}
	return ""
}

func (x *InventoryItem) GetProductStatus() string {
	if x != nil && x.ProductStatus != nil {
		return *x.ProductStatus
	}
	return ""
}

func (x *InventoryItem) GetTestSpec1() string {
	if x != nil && x.TestSpec1 != nil {
		return *x.TestSpec1
	}
	return ""
}

func (x *InventoryItem) GetPoNumber() int32 {
	if x != nil && x.PoNumber != nil {
		return *x.PoNumber
	}
	return 0
}

func (x *InventoryItem) GetPoItem() int32 {
	if x != nil && x.PoItem != nil {
		return *x.PoItem
	}
	return 0
}

func (x *InventoryItem) GetProductDesc() string {
	if x != nil && x.ProductDesc != nil {
		return *x.ProductDesc
	}
	return ""
}

func (x *InventoryItem) GetProductSizeDesc() string {
	if x != nil && x.ProductSizeDesc != nil {
		return *x.ProductSizeDesc
	}
	return ""
}

func (x *InventoryItem) GetMetalType() string {
	if x != nil && x.MetalType != nil {
		return *x.MetalType
	}
	return ""
}

func (x *InventoryItem) GetMetalType2() string {
	if x != nil && x.MetalType2 != nil {
		return *x.MetalType2
	}
	return ""
}

func (x *InventoryItem) GetCreatedRefPrefix() string {
	if x != nil && x.CreatedRefPrefix != nil {
		return *x.CreatedRefPrefix
	}
	return ""
}

func (x *InventoryItem) GetCreatedRefNo() int32 {
	if x != nil && x.CreatedRefNo != nil {
		return *x.CreatedRefNo
	}
	return 0
}

func (x *InventoryItem) GetCreatedRefItem() *DecimalValue {
	if x != nil {
		return x.CreatedRefItem
	}
	return nil
}

func (x *InventoryItem) GetVendorNo() string {
	if x != nil && x.VendorNo != nil {
		return *x.VendorNo
	}
	return ""
}

func (x *InventoryItem) GetVendorName() string {
	if x != nil && x.VendorName != nil {
		return *x.VendorName
	}
	return ""
}

func (x *InventoryItem) GetPoCategory() string {
	if x != nil && x.PoCategory != nil {
		return *x.PoCategory
	}
	return ""
}

func (x *InventoryItem) GetPoCategoryDesc() string {
	if x != nil && x.PoCategoryDesc != nil {
		return *x.PoCategoryDesc
	}
	return ""
}

func (x *InventoryItem) GetPoType() string {
	if x != nil && x.PoType != nil {
		return *x.PoType
	}
	return ""
}

func (x *InventoryItem) GetPoTypeDesc() string {
	if x != nil && x.PoTypeDesc != nil {
		return *x.PoTypeDesc
	}
	return ""
}

func (x *InventoryItem) GetWhsType() string {
	if x != nil && x.WhsType != nil {
		return *x.WhsType
	}
	return ""
}

func (x *InventoryItem) GetWhsTypeDesc() string {
	if x != nil && x.WhsTypeDesc != nil {
		return *x.WhsTypeDesc
	}
	return ""
}

func (x *InventoryItem) GetSupplierRef() string {
	if x != nil && x.SupplierRef != nil {
		return *x.SupplierRef
	}
	return ""
}

func (x *InventoryItem) GetProductControlsCode() string {
	if x != nil && x.ProductControlsCode != nil {
		return *x.ProductControlsCode
	}
	return ""
}

func (x *InventoryItem) GetProductControlsDesc() string {
	if x != nil && x.ProductControlsDesc != nil {
		return *x.ProductControlsDesc
	}
	return ""
}

func (x *InventoryItem) GetBatch() string {
	if x != nil && x.Batch != nil {
		return *x.Batch
	}
	return ""
}

func (x *InventoryItem) GetCusSpec() string {
	if x != nil && x.CusSpec != nil {
		return *x.CusSpec
	}
	return ""
}

func (x *InventoryItem) GetTreatmentNumber() string {
	if x != nil && x.TreatmentNumber != nil {
		return *x.TreatmentNumber
	}
	return ""
}

func (x *InventoryItem) GetOtherNumber() string {
	if x != nil && x.OtherNumber != nil {
		return *x.OtherNumber
	}
	return ""
}

func (x *InventoryItem) GetSpecCondition() string {
	if x != nil && x.SpecCondition != nil {
		return *x.SpecCondition
	}
	return ""
}

func (x *InventoryItem) GetAbc() string {
	if x != nil && x.Abc != nil {
		return *x.Abc
	}
	return ""
}

func (x *InventoryItem) GetMillHeatLotNo() string {
	if x != nil && x.MillHeatLotNo != nil {
		return *x.MillHeatLotNo
	}
	return ""
}

func (x *InventoryItem) GetStratRank() string {
	if x != nil && x.StratRank != nil {
		return *x.StratRank
	}
	return ""
}

func (x *InventoryItem) GetProductSuperItem() string {
	if x != nil && x.ProductSuperItem != nil {
		return *x.ProductSuperItem
	}
	return ""
}

func (x *InventoryItem) GetLength() *DecimalValue {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *InventoryItem) GetLengthOh() *DecimalValue {
	if x != nil {
		return x.LengthOh
	}
	return nil
}

func (x *InventoryItem) GetLengthAlloc() *DecimalValue {
	if x != nil {
		return x.LengthAlloc
	}
	return nil
}

func (x *InventoryItem) GetLengthAvl() *DecimalValue {
	if x != nil {
		return x.LengthAvl
	}
	return nil
}

func (x *InventoryItem) GetWgtOhBase() *DecimalValue {
	if x != nil {
		return x.WgtOhBase
	}
	return nil
}

func (x *InventoryItem) GetWgtAllocBase() *DecimalValue {
	if x != nil {
		return x.WgtAllocBase
	}
	return nil
}

func (x *InventoryItem) GetWgtAvlBase() *DecimalValue {
	if x != nil {
		return x.WgtAvlBase
	}
	return nil
}

func (x *InventoryItem) GetWgtOhDisplay() *DecimalValue {
	if x != nil {
		return x.WgtOhDisplay
	}
	return nil
}

func (x *InventoryItem) GetWgtAllocDisplay() *DecimalValue {
	if x != nil {
		return x.WgtAllocDisplay
	}
	return nil
}

func (x *InventoryItem) GetWgtAvlDisplay() *DecimalValue {
	if x != nil {
		return x.WgtAvlDisplay
	}
	return nil
}

func (x *InventoryItem) GetPcsOh() int32 {
	if x != nil && x.PcsOh != nil {
		return *x.PcsOh
	}
	return 0
}

func (x *InventoryItem) GetPcsAlloc() int32 {
	if x != nil && x.PcsAlloc != nil {
		return *x.PcsAlloc
	}
	return 0
}

func (x *InventoryItem) GetPcsAvl() int32 {
	if x != nil && x.PcsAvl != nil {
		return *x.PcsAvl
	}
	return 0
}

func (x *InventoryItem) GetQtyOh() *DecimalValue {
	if x != nil {
		return x.QtyOh
	}
	return nil
}

func (x *InventoryItem) GetQtyAlloc() *DecimalValue {
	if x != nil {
		return x.QtyAlloc
	}
	return nil
}

func (x *InventoryItem) GetQtyAvl() *DecimalValue {
	if x != nil {
		return x.QtyAvl
	}
	return nil
}

func (x *InventoryItem) GetUnitValueBase() *DecimalValue {
	if x != nil {
		return x.UnitValueBase
	}
	return nil
}

func (x *InventoryItem) GetUnitValueDisplay() *DecimalValue {
	if x != nil {
		return x.UnitValueDisplay
	}
	return nil
}

func (x *InventoryItem) GetOrigMatlCostBase() *DecimalValue {
	if x != nil {
		return x.OrigMatlCostBase
	}
	return nil
}

func (x *InventoryItem) GetOrigPrdnCostBase() *DecimalValue {
	if x != nil {
		return x.OrigPrdnCostBase
	}
	return nil
}

func (x *InventoryItem) GetOrigFrgtCostBase() *DecimalValue {
	if x != nil {
		return x.OrigFrgtCostBase
	}
	return nil
}

func (x *InventoryItem) GetOrigMiscCostBase() *DecimalValue {
	if x != nil {
		return x.OrigMiscCostBase
	}
	return nil
}

func (x *InventoryItem) GetOrigSurchCostBase() *DecimalValue {
	if x != nil {
		return x.OrigSurchCostBase
	}
	return nil
}

func (x *InventoryItem) GetOrigTotalCostOhBase() *DecimalValue {
	if x != nil {
		return x.OrigTotalCostOhBase
	}
	return nil
}

func (x *InventoryItem) GetOrigMatlCostDisplay() *DecimalValue {
	if x != nil {
		return x.OrigMatlCostDisplay
	}
	return nil
}

func (x *InventoryItem) GetOrigPrdnCostDisplay() *DecimalValue {
	if x != nil {
		return x.OrigPrdnCostDisplay
	}
	return nil
}

func (x *InventoryItem) GetOrigFrgtCostDisplay() *DecimalValue {
	if x != nil {
		return x.OrigFrgtCostDisplay
	}
	return nil
}

func (x *InventoryItem) GetOrigMiscCostDisplay() *DecimalValue {
	if x != nil {
		return x.OrigMiscCostDisplay
	}
	return nil
}

func (x *InventoryItem) GetOrigSurchCostDisplay() *DecimalValue {
	if x != nil {
		return x.OrigSurchCostDisplay
	}
	return nil
}

func (x *InventoryItem) GetOrigTotalCostDisplay() *DecimalValue {
	if x != nil {
		return x.OrigTotalCostDisplay
	}
	return nil
}

func (x *InventoryItem) GetMatlCostPerWgtBase() *DecimalValue {
	if x != nil {
		return x.MatlCostPerWgtBase
	}
	return nil
}

func (x *InventoryItem) GetPrdnCostPerWgtBase() *DecimalValue {
	if x != nil {
		return x.PrdnCostPerWgtBase
	}
	return nil
}

func (x *InventoryItem) GetTransCostPerWgtBase() *DecimalValue {
	if x != nil {
		return x.TransCostPerWgtBase
	}
	return nil
}

func (x *InventoryItem) GetMiscCostPerWgtBase() *DecimalValue {
	if x != nil {
		return x.MiscCostPerWgtBase
	}
	return nil
}

func (x *InventoryItem) GetSurchCostPerWgtBase() *DecimalValue {
	if x != nil {
		return x.SurchCostPerWgtBase
	}
	return nil
}

func (x *InventoryItem) GetTotalCostPerWgtBase() *DecimalValue {
	if x != nil {
		return x.TotalCostPerWgtBase
	}
	return nil
}

func (x *InventoryItem) GetMatlCostPerWgtDisplay() *DecimalValue {
	if x != nil {
		return x.MatlCostPerWgtDisplay
	}
	return nil
}

func (x *InventoryItem) GetPrdnCostPerWgtDisplay() *DecimalValue {
	if x != nil {
		return x.PrdnCostPerWgtDisplay
	}
	return nil
}

func (x *InventoryItem) GetTransCostPerWgtDisplay() *DecimalValue {
	if x != nil {
		return x.TransCostPerWgtDisplay
	}
	return nil
}

func (x *InventoryItem) GetMiscCostPerWgtDisplay() *DecimalValue {
	if x != nil {
		return x.MiscCostPerWgtDisplay
	}
	return nil
}

func (x *InventoryItem) GetSurchCostPerWgtDisplay() *DecimalValue {
	if x != nil {
		return x.SurchCostPerWgtDisplay
	}
	return nil
}

func (x *InventoryItem) GetTotalCostPerWgtDisplay() *DecimalValue {
	if x != nil {
		return x.TotalCostPerWgtDisplay
	}
	return nil
}

func (x *InventoryItem) GetMatlValueOhBase() *DecimalValue {
	if x != nil {
		return x.MatlValueOhBase
	}
	return nil
}

func (x *InventoryItem) GetTransValueOhBase() *DecimalValue {
	if x != nil {
		return x.TransValueOhBase
	}
	return nil
}

func (x *InventoryItem) GetPrdnValueOhBase() *DecimalValue {
	if x != nil {
		return x.PrdnValueOhBase
	}
	return nil
}

func (x *InventoryItem) GetMiscValueOhBase() *DecimalValue {
	if x != nil {
		return x.MiscValueOhBase
	}
	return nil
}

func (x *InventoryItem) GetSurchValueOhBase() *DecimalValue {
	if x != nil {
		return x.SurchValueOhBase
	}
	return nil
}

func (x *InventoryItem) GetTotalValueOhBase() *DecimalValue {
	if x != nil {
		return x.TotalValueOhBase
	}
	return nil
}

func (x *InventoryItem) GetMatlValueOhDisplay() *DecimalValue {
	if x != nil {
		return x.MatlValueOhDisplay
	}
	return nil
}

func (x *InventoryItem) GetTransValueOhDisplay() *DecimalValue {
	if x != nil {
		return x.TransValueOhDisplay
	}
	return nil
}

func (x *InventoryItem) GetPrdnValueOhDisplay() *DecimalValue {
	if x != nil {
		return x.PrdnValueOhDisplay
	}
	return nil
}

func (x *InventoryItem) GetMiscValueOhDisplay() *DecimalValue {
	if x != nil {
		return x.MiscValueOhDisplay
	}
	return nil
}

func (x *InventoryItem) GetSurchValueOhDisplay() *DecimalValue {
	if x != nil {
		return x.SurchValueOhDisplay
	}
	return nil
}

func (x *InventoryItem) GetTotalValueOhDisplay() *DecimalValue {
	if x != nil {
		return x.TotalValueOhDisplay
	}
	return nil
}

func (x *InventoryItem) GetMatlValueAllocBase() *DecimalValue {
	if x != nil {
		return x.MatlValueAllocBase
	}
	return nil
}

func (x *InventoryItem) GetTransValueAllocBase() *DecimalValue {
	if x != nil {
		return x.TransValueAllocBase
	}
	return nil
}

func (x *InventoryItem) GetPrdnValueAllocBase() *DecimalValue {
	if x != nil {
		return x.PrdnValueAllocBase
	}
	return nil
}

func (x *InventoryItem) GetMiscValueAllocBase() *DecimalValue {
	if x != nil {
		return x.MiscValueAllocBase
	}
	return nil
}

func (x *InventoryItem) GetSurchValueAllocBase() *DecimalValue {
	if x != nil {
		return x.SurchValueAllocBase
	}
	return nil
}

func (x *InventoryItem) GetTotalValueAllocBase() *DecimalValue {
	if x != nil {
		return x.TotalValueAllocBase
	}
	return nil
}

func (x *InventoryItem) GetMatlValueAllocDisplay() *DecimalValue {
	if x != nil {
		return x.MatlValueAllocDisplay
	}
	return nil
}

func (x *InventoryItem) GetTransValueAllocDisplay() *DecimalValue {
	if x != nil {
		return x.TransValueAllocDisplay
	}
	return nil
}

func (x *InventoryItem) GetPrdnValueAllocDisplay() *DecimalValue {
	if x != nil {
		return x.PrdnValueAllocDisplay
	}
	return nil
}

func (x *InventoryItem) GetMiscValueAllocDisplay() *DecimalValue {
	if x != nil {
		return x.MiscValueAllocDisplay
	}
	return nil
}

func (x *InventoryItem) GetSurchValueAllocDisplay() *DecimalValue {
	if x != nil {
		return x.SurchValueAllocDisplay
	}
	return nil
}

func (x *InventoryItem) GetTotalValueAllocDisplay() *DecimalValue {
	if x != nil {
		return x.TotalValueAllocDisplay
	}
	return nil
}

func (x *InventoryItem) GetMatlValueAvlBase() *DecimalValue {
	if x != nil {
		return x.MatlValueAvlBase
	}
	return nil
}

func (x *InventoryItem) GetTransValueAvlBase() *DecimalValue {
	if x != nil {
		return x.TransValueAvlBase
	}
	return nil
}

func (x *InventoryItem) GetPrdnValueAvlBase() *DecimalValue {
	if x != nil {
		return x.PrdnValueAvlBase
	}
	return nil
}

func (x *InventoryItem) GetMiscValueAvlBase() *DecimalValue {
	if x != nil {
		return x.MiscValueAvlBase
	}
	return nil
}

func (x *InventoryItem) GetSurchValueAvlBase() *DecimalValue {
	if x != nil {
		return x.SurchValueAvlBase
	}
	return nil
}

func (x *InventoryItem) GetTotalValueAvlBase() *DecimalValue {
	if x != nil {
		return x.TotalValueAvlBase
	}
	return nil
}

func (x *InventoryItem) GetMatlValueAvlDisplay() *DecimalValue {
	if x != nil {
		return x.MatlValueAvlDisplay
	}
	return nil
}

func (x *InventoryItem) GetTransValueAvlDisplay() *DecimalValue {
	if x != nil {
		return x.TransValueAvlDisplay
	}
	return nil
}

func (x *InventoryItem) GetPrdnValueAvlDisplay() *DecimalValue {
	if x != nil {
		return x.PrdnValueAvlDisplay
	}
	return nil
}

func (x *InventoryItem) GetMiscValueAvlDisplay() *DecimalValue {
	if x != nil {
		return x.MiscValueAvlDisplay
	}
	return nil
}

func (x *InventoryItem) GetSurchValueAvlDisplay() *DecimalValue {
	if x != nil {
		return x.SurchValueAvlDisplay
	}
	return nil
}

func (x *InventoryItem) GetTotalValueAvlDisplay() *DecimalValue {
	if x != nil {
		return x.TotalValueAvlDisplay
	}
	return nil
}

func (x *InventoryItem) GetPoPcsOrdered() int32 {
	if x != nil && x.PoPcsOrdered != nil {
		return *x.PoPcsOrdered
	}
	return 0
}

func (x *InventoryItem) GetPoPcsAlloc() int32 {
	if x != nil && x.PoPcsAlloc != nil {
		return *x.PoPcsAlloc
	}
	return 0
}

func (x *InventoryItem) GetPoPcsDelivered() int32 {
	if x != nil && x.PoPcsDelivered != nil {
		return *x.PoPcsDelivered
	}
	return 0
}

func (x *InventoryItem) GetPoPcsBalance() *DecimalValue {
	if x != nil {
		return x.PoPcsBalance
	}
	return nil
}

func (x *InventoryItem) GetPoQtyOrdered() *DecimalValue {
	if x != nil {
		return x.PoQtyOrdered
	}
	return nil
}

func (x *InventoryItem) GetPoQtyAllocated() *DecimalValue {
	if x != nil {
		return x.PoQtyAllocated
	}
	return nil
}

func (x *InventoryItem) GetPoQtyDelivered() *DecimalValue {
	if x != nil {
		return x.PoQtyDelivered
	}
	return nil
}

func (x *InventoryItem) GetPoQtyBalance() *DecimalValue {
	if x != nil {
		return x.PoQtyBalance
	}
	return nil
}

func (x *InventoryItem) GetPoWgtOrderedBase() *DecimalValue {
	if x != nil {
		return x.PoWgtOrderedBase
	}
	return nil
}

func (x *InventoryItem) GetPoWgtOrderedDisplay() *DecimalValue {
	if x != nil {
		return x.PoWgtOrderedDisplay
	}
	return nil
}

func (x *InventoryItem) GetPoWgtAllocBase() *DecimalValue {
	if x != nil {
		return x.PoWgtAllocBase
	}
	return nil
}

func (x *InventoryItem) GetPoWgtAllocDisplay() *DecimalValue {
	if x != nil {
		return x.PoWgtAllocDisplay
	}
	return nil
}

func (x *InventoryItem) GetPoWgtDeliveredBase() *DecimalValue {
	if x != nil {
		return x.PoWgtDeliveredBase
	}
	return nil
}

func (x *InventoryItem) GetPoWgtDeliveredDisplay() *DecimalValue {
	if x != nil {
		return x.PoWgtDeliveredDisplay
	}
	return nil
}

func (x *InventoryItem) GetPoWgtBalanceBase() *DecimalValue {
	if x != nil {
		return x.PoWgtBalanceBase
	}
	return nil
}

var File_inventoryRequest_proto protoreflect.FileDescriptor

const file_inventoryRequest_proto_rawDesc = "" +
	"\n" +
	"\x16inventoryRequest.proto\x12\tinventory\"\xe5\x02\n" +
	"\x10InventoryRequest\x12\x14\n" +
	"\x05coids\x18\x01 \x03(\tR\x05coids\x12=\n" +
	"\n" +
	"warehouses\x18\x02 \x03(\v2\x1d.inventory.WarehouseListValueR\n" +
	"warehouses\x12>\n" +
	"\x0freceivedDateMin\x18\x03 \x01(\v2\x0f.inventory.DateH\x00R\x0freceivedDateMin\x88\x01\x01\x12>\n" +
	"\x0freceivedDateMax\x18\x04 \x01(\v2\x0f.inventory.DateH\x01R\x0freceivedDateMax\x88\x01\x01\x12(\n" +
	"\x0fdisplayCurrency\x18\a \x01(\tR\x0fdisplayCurrency\x12*\n" +
	"\x10displayWeightUOM\x18\b \x01(\tR\x10displayWeightUOMB\x12\n" +
	"\x10_receivedDateMinB\x12\n" +
	"\x10_receivedDateMax\"J\n" +
	"\x12WarehouseListValue\x12\x12\n" +
	"\x04coid\x18\x01 \x01(\tR\x04coid\x12 \n" +
	"\vwarehouseId\x18\x02 \x01(\x05R\vwarehouseId\"A\n" +
	"\x0fInventoryResult\x12.\n" +
	"\x05items\x18\x01 \x03(\v2\x18.inventory.InventoryItemR\x05items\"B\n" +
	"\x04Date\x12\x12\n" +
	"\x04year\x18\x01 \x01(\x05R\x04year\x12\x14\n" +
	"\x05month\x18\x02 \x01(\x05R\x05month\x12\x10\n" +
	"\x03day\x18\x03 \x01(\x05R\x03day\":\n" +
	"\fDecimalValue\x12\x14\n" +
	"\x05units\x18\x01 \x01(\x03R\x05units\x12\x14\n" +
	"\x05nanos\x18\x02 \x01(\x0fR\x05nanos\"\xb6k\n" +
	"\rInventoryItem\x12\x17\n" +
	"\x04coid\x18\x01 \x01(\tH\x00R\x04coid\x88\x01\x01\x12+\n" +
	"\x0fex_rate_summary\x18\x02 \x01(\tH\x01R\rexRateSummary\x88\x01\x01\x12\x1b\n" +
	"\x06branch\x18\x03 \x01(\tH\x02R\x06branch\x88\x01\x01\x12#\n" +
	"\vstk_item_id\x18\x04 \x01(\x05H\x03R\tstkItemId\x88\x01\x01\x12&\n" +
	"\fproduct_code\x18\x05 \x01(\tH\x04R\vproductCode\x88\x01\x01\x12.\n" +
	"\x10product_category\x18\x06 \x01(\tH\x05R\x0fproductCategory\x88\x01\x01\x12&\n" +
	"\fproduct_size\x18\a \x01(\tH\x06R\vproductSize\x88\x01\x01\x120\n" +
	"\x11product_condition\x18\b \x01(\tH\aR\x10productCondition\x88\x01\x01\x12(\n" +
	"\rproduct_grade\x18\t \x01(\tH\bR\fproductGrade\x88\x01\x01\x12&\n" +
	"\fproduct_spec\x18\n" +
	" \x01(\tH\tR\vproductSpec\x88\x01\x01\x12G\n" +
	"\x10outside_diameter\x18\v \x01(\v2\x17.inventory.DecimalValueH\n" +
	"R\x0foutsideDiameter\x88\x01\x01\x12E\n" +
	"\x0finside_diameter\x18\f \x01(\v2\x17.inventory.DecimalValueH\vR\x0einsideDiameter\x88\x01\x01\x127\n" +
	"\btheo_wgt\x18\r \x01(\v2\x17.inventory.DecimalValueH\fR\atheoWgt\x88\x01\x01\x12G\n" +
	"\x11theo_wgt_per_foot\x18\x0e \x01(\v2\x17.inventory.DecimalValueH\rR\x0etheoWgtPerFoot\x88\x01\x01\x12\x17\n" +
	"\x04mill\x18\x0f \x01(\tH\x0eR\x04mill\x88\x01\x01\x128\n" +
	"\x16country_of_matl_origin\x18\x10 \x01(\tH\x0fR\x13countryOfMatlOrigin\x88\x01\x01\x12\x17\n" +
	"\x04heat\x18\x11 \x01(\tH\x10R\x04heat\x88\x01\x01\x12\x1e\n" +
	"\bwhs_code\x18\x12 \x01(\tH\x11R\awhsCode\x88\x01\x01\x12\x1e\n" +
	"\bwhs_name\x18\x13 \x01(\tH\x12R\awhsName\x88\x01\x01\x12\x1a\n" +
	"\x06whs_bu\x18\x14 \x01(\tH\x13R\x05whsBu\x88\x01\x01\x12\"\n" +
	"\n" +
	"bu_country\x18\x15 \x01(\tH\x14R\tbuCountry\x88\x01\x01\x12\"\n" +
	"\n" +
	"parent_whs\x18\x16 \x01(\tH\x15R\tparentWhs\x88\x01\x01\x12\"\n" +
	"\n" +
	"master_whs\x18\x17 \x01(\tH\x16R\tmasterWhs\x88\x01\x01\x12\x15\n" +
	"\x03tag\x18\x18 \x01(\tH\x17R\x03tag\x88\x01\x01\x12\"\n" +
	"\n" +
	"parent_tag\x18\x19 \x01(\tH\x18R\tparentTag\x88\x01\x01\x12\"\n" +
	"\n" +
	"master_tag\x18\x1a \x01(\tH\x19R\tmasterTag\x88\x01\x01\x12'\n" +
	"\rstk_hold_code\x18\x1b \x01(\tH\x1aR\vstkHoldCode\x88\x01\x01\x12+\n" +
	"\x0fstk_hold_reason\x18\x1c \x01(\tH\x1bR\rstkHoldReason\x88\x01\x01\x12'\n" +
	"\rstk_hold_user\x18\x1d \x01(\tH\x1cR\vstkHoldUser\x88\x01\x01\x12'\n" +
	"\rstk_hold_desc\x18\x1e \x01(\tH\x1dR\vstkHoldDesc\x88\x01\x01\x128\n" +
	"\rstk_hold_date\x18\x1f \x01(\v2\x0f.inventory.DateH\x1eR\vstkHoldDate\x88\x01\x01\x12,\n" +
	"\x0fcustomer_number\x18  \x01(\tH\x1fR\x0ecustomerNumber\x88\x01\x01\x12(\n" +
	"\rcustomer_name\x18! \x01(\tH R\fcustomerName\x88\x01\x01\x12$\n" +
	"\vpart_number\x18\" \x01(\tH!R\n" +
	"partNumber\x88\x01\x01\x12&\n" +
	"\fstk_location\x18# \x01(\tH\"R\vstkLocation\x88\x01\x01\x12$\n" +
	"\vstk_remarks\x18$ \x01(\tH#R\n" +
	"stkRemarks\x88\x01\x01\x12(\n" +
	"\rreject_reason\x18% \x01(\tH$R\frejectReason\x88\x01\x01\x12$\n" +
	"\vreject_desc\x18& \x01(\tH%R\n" +
	"rejectDesc\x88\x01\x01\x12*\n" +
	"\x0etransient_type\x18' \x01(\tH&R\rtransientType\x88\x01\x01\x12(\n" +
	"\rtransient_ref\x18( \x01(\tH'R\ftransientRef\x88\x01\x01\x12(\n" +
	"\rstk_ownership\x18) \x01(\tH(R\fstkOwnership\x88\x01\x01\x123\n" +
	"\x13for_customer_number\x18* \x01(\tH)R\x11forCustomerNumber\x88\x01\x01\x12/\n" +
	"\x11for_customer_name\x18+ \x01(\tH*R\x0fforCustomerName\x88\x01\x01\x12\"\n" +
	"\n" +
	"stk_status\x18, \x01(\tH+R\tstkStatus\x88\x01\x01\x12*\n" +
	"\x0eproduct_status\x18- \x01(\tH,R\rproductStatus\x88\x01\x01\x12\"\n" +
	"\n" +
	"test_spec1\x18. \x01(\tH-R\ttestSpec1\x88\x01\x01\x12 \n" +
	"\tpo_number\x18/ \x01(\x05H.R\bpoNumber\x88\x01\x01\x12\x1c\n" +
	"\apo_item\x180 \x01(\x05H/R\x06poItem\x88\x01\x01\x12&\n" +
	"\fproduct_desc\x181 \x01(\tH0R\vproductDesc\x88\x01\x01\x12/\n" +
	"\x11product_size_desc\x182 \x01(\tH1R\x0fproductSizeDesc\x88\x01\x01\x12\"\n" +
	"\n" +
	"metal_type\x183 \x01(\tH2R\tmetalType\x88\x01\x01\x12$\n" +
	"\vmetal_type2\x184 \x01(\tH3R\n" +
	"metalType2\x88\x01\x01\x121\n" +
	"\x12created_ref_prefix\x185 \x01(\tH4R\x10createdRefPrefix\x88\x01\x01\x12)\n" +
	"\x0ecreated_ref_no\x186 \x01(\x05H5R\fcreatedRefNo\x88\x01\x01\x12F\n" +
	"\x10created_ref_item\x187 \x01(\v2\x17.inventory.DecimalValueH6R\x0ecreatedRefItem\x88\x01\x01\x12 \n" +
	"\tvendor_no\x188 \x01(\tH7R\bvendorNo\x88\x01\x01\x12$\n" +
	"\vvendor_name\x189 \x01(\tH8R\n" +
	"vendorName\x88\x01\x01\x12$\n" +
	"\vpo_category\x18: \x01(\tH9R\n" +
	"poCategory\x88\x01\x01\x12-\n" +
	"\x10po_category_desc\x18; \x01(\tH:R\x0epoCategoryDesc\x88\x01\x01\x12\x1c\n" +
	"\apo_type\x18< \x01(\tH;R\x06poType\x88\x01\x01\x12%\n" +
	"\fpo_type_desc\x18= \x01(\tH<R\n" +
	"poTypeDesc\x88\x01\x01\x12\x1e\n" +
	"\bwhs_type\x18> \x01(\tH=R\awhsType\x88\x01\x01\x12'\n" +
	"\rwhs_type_desc\x18? \x01(\tH>R\vwhsTypeDesc\x88\x01\x01\x12&\n" +
	"\fsupplier_ref\x18@ \x01(\tH?R\vsupplierRef\x88\x01\x01\x127\n" +
	"\x15product_controls_code\x18A \x01(\tH@R\x13productControlsCode\x88\x01\x01\x127\n" +
	"\x15product_controls_desc\x18B \x01(\tHAR\x13productControlsDesc\x88\x01\x01\x12\x19\n" +
	"\x05batch\x18C \x01(\tHBR\x05batch\x88\x01\x01\x12\x1e\n" +
	"\bcus_spec\x18D \x01(\tHCR\acusSpec\x88\x01\x01\x12.\n" +
	"\x10treatment_number\x18E \x01(\tHDR\x0ftreatmentNumber\x88\x01\x01\x12&\n" +
	"\fother_number\x18F \x01(\tHER\votherNumber\x88\x01\x01\x12*\n" +
	"\x0espec_condition\x18G \x01(\tHFR\rspecCondition\x88\x01\x01\x12\x15\n" +
	"\x03abc\x18H \x01(\tHGR\x03abc\x88\x01\x01\x12,\n" +
	"\x10mill_heat_lot_no\x18I \x01(\tHHR\rmillHeatLotNo\x88\x01\x01\x12\"\n" +
	"\n" +
	"strat_rank\x18J \x01(\tHIR\tstratRank\x88\x01\x01\x121\n" +
	"\x12product_super_item\x18K \x01(\tHJR\x10productSuperItem\x88\x01\x01\x124\n" +
	"\x06length\x18L \x01(\v2\x17.inventory.DecimalValueHKR\x06length\x88\x01\x01\x129\n" +
	"\tlength_oh\x18M \x01(\v2\x17.inventory.DecimalValueHLR\blengthOh\x88\x01\x01\x12?\n" +
	"\flength_alloc\x18N \x01(\v2\x17.inventory.DecimalValueHMR\vlengthAlloc\x88\x01\x01\x12;\n" +
	"\n" +
	"length_avl\x18O \x01(\v2\x17.inventory.DecimalValueHNR\tlengthAvl\x88\x01\x01\x12<\n" +
	"\vwgt_oh_base\x18P \x01(\v2\x17.inventory.DecimalValueHOR\twgtOhBase\x88\x01\x01\x12B\n" +
	"\x0ewgt_alloc_base\x18Q \x01(\v2\x17.inventory.DecimalValueHPR\fwgtAllocBase\x88\x01\x01\x12>\n" +
	"\fwgt_avl_base\x18R \x01(\v2\x17.inventory.DecimalValueHQR\n" +
	"wgtAvlBase\x88\x01\x01\x12B\n" +
	"\x0ewgt_oh_display\x18S \x01(\v2\x17.inventory.DecimalValueHRR\fwgtOhDisplay\x88\x01\x01\x12H\n" +
	"\x11wgt_alloc_display\x18T \x01(\v2\x17.inventory.DecimalValueHSR\x0fwgtAllocDisplay\x88\x01\x01\x12D\n" +
	"\x0fwgt_avl_display\x18U \x01(\v2\x17.inventory.DecimalValueHTR\rwgtAvlDisplay\x88\x01\x01\x12\x1a\n" +
	"\x06pcs_oh\x18V \x01(\x05HUR\x05pcsOh\x88\x01\x01\x12 \n" +
	"\tpcs_alloc\x18W \x01(\x05HVR\bpcsAlloc\x88\x01\x01\x12\x1c\n" +
	"\apcs_avl\x18X \x01(\x05HWR\x06pcsAvl\x88\x01\x01\x123\n" +
	"\x06qty_oh\x18Y \x01(\v2\x17.inventory.DecimalValueHXR\x05qtyOh\x88\x01\x01\x129\n" +
	"\tqty_alloc\x18Z \x01(\v2\x17.inventory.DecimalValueHYR\bqtyAlloc\x88\x01\x01\x125\n" +
	"\aqty_avl\x18[ \x01(\v2\x17.inventory.DecimalValueHZR\x06qtyAvl\x88\x01\x01\x12D\n" +
	"\x0funit_value_base\x18\\ \x01(\v2\x17.inventory.DecimalValueH[R\runitValueBase\x88\x01\x01\x12J\n" +
	"\x12unit_value_display\x18] \x01(\v2\x17.inventory.DecimalValueH\\R\x10unitValueDisplay\x88\x01\x01\x12K\n" +
	"\x13orig_matl_cost_base\x18^ \x01(\v2\x17.inventory.DecimalValueH]R\x10origMatlCostBase\x88\x01\x01\x12K\n" +
	"\x13orig_prdn_cost_base\x18_ \x01(\v2\x17.inventory.DecimalValueH^R\x10origPrdnCostBase\x88\x01\x01\x12K\n" +
	"\x13orig_frgt_cost_base\x18` \x01(\v2\x17.inventory.DecimalValueH_R\x10origFrgtCostBase\x88\x01\x01\x12K\n" +
	"\x13orig_misc_cost_base\x18a \x01(\v2\x17.inventory.DecimalValueH`R\x10origMiscCostBase\x88\x01\x01\x12M\n" +
	"\x14orig_surch_cost_base\x18b \x01(\v2\x17.inventory.DecimalValueHaR\x11origSurchCostBase\x88\x01\x01\x12R\n" +
	"\x17orig_total_cost_oh_base\x18c \x01(\v2\x17.inventory.DecimalValueHbR\x13origTotalCostOhBase\x88\x01\x01\x12Q\n" +
	"\x16orig_matl_cost_display\x18d \x01(\v2\x17.inventory.DecimalValueHcR\x13origMatlCostDisplay\x88\x01\x01\x12Q\n" +
	"\x16orig_prdn_cost_display\x18e \x01(\v2\x17.inventory.DecimalValueHdR\x13origPrdnCostDisplay\x88\x01\x01\x12Q\n" +
	"\x16orig_frgt_cost_display\x18f \x01(\v2\x17.inventory.DecimalValueHeR\x13origFrgtCostDisplay\x88\x01\x01\x12Q\n" +
	"\x16orig_misc_cost_display\x18g \x01(\v2\x17.inventory.DecimalValueHfR\x13origMiscCostDisplay\x88\x01\x01\x12S\n" +
	"\x17orig_surch_cost_display\x18h \x01(\v2\x17.inventory.DecimalValueHgR\x14origSurchCostDisplay\x88\x01\x01\x12S\n" +
	"\x17orig_total_cost_display\x18i \x01(\v2\x17.inventory.DecimalValueHhR\x14origTotalCostDisplay\x88\x01\x01\x12P\n" +
	"\x16matl_cost_per_wgt_base\x18j \x01(\v2\x17.inventory.DecimalValueHiR\x12matlCostPerWgtBase\x88\x01\x01\x12P\n" +
	"\x16prdn_cost_per_wgt_base\x18k \x01(\v2\x17.inventory.DecimalValueHjR\x12prdnCostPerWgtBase\x88\x01\x01\x12R\n" +
	"\x17trans_cost_per_wgt_base\x18l \x01(\v2\x17.inventory.DecimalValueHkR\x13transCostPerWgtBase\x88\x01\x01\x12P\n" +
	"\x16misc_cost_per_wgt_base\x18m \x01(\v2\x17.inventory.DecimalValueHlR\x12miscCostPerWgtBase\x88\x01\x01\x12R\n" +
	"\x17surch_cost_per_wgt_base\x18n \x01(\v2\x17.inventory.DecimalValueHmR\x13surchCostPerWgtBase\x88\x01\x01\x12R\n" +
	"\x17total_cost_per_wgt_base\x18o \x01(\v2\x17.inventory.DecimalValueHnR\x13totalCostPerWgtBase\x88\x01\x01\x12V\n" +
	"\x19matl_cost_per_wgt_display\x18p \x01(\v2\x17.inventory.DecimalValueHoR\x15matlCostPerWgtDisplay\x88\x01\x01\x12V\n" +
	"\x19prdn_cost_per_wgt_display\x18q \x01(\v2\x17.inventory.DecimalValueHpR\x15prdnCostPerWgtDisplay\x88\x01\x01\x12X\n" +
	"\x1atrans_cost_per_wgt_display\x18r \x01(\v2\x17.inventory.DecimalValueHqR\x16transCostPerWgtDisplay\x88\x01\x01\x12V\n" +
	"\x19misc_cost_per_wgt_display\x18s \x01(\v2\x17.inventory.DecimalValueHrR\x15miscCostPerWgtDisplay\x88\x01\x01\x12X\n" +
	"\x1asurch_cost_per_wgt_display\x18t \x01(\v2\x17.inventory.DecimalValueHsR\x16surchCostPerWgtDisplay\x88\x01\x01\x12X\n" +
	"\x1atotal_cost_per_wgt_display\x18u \x01(\v2\x17.inventory.DecimalValueHtR\x16totalCostPerWgtDisplay\x88\x01\x01\x12I\n" +
	"\x12matl_value_oh_base\x18v \x01(\v2\x17.inventory.DecimalValueHuR\x0fmatlValueOhBase\x88\x01\x01\x12K\n" +
	"\x13trans_value_oh_base\x18w \x01(\v2\x17.inventory.DecimalValueHvR\x10transValueOhBase\x88\x01\x01\x12I\n" +
	"\x12prdn_value_oh_base\x18x \x01(\v2\x17.inventory.DecimalValueHwR\x0fprdnValueOhBase\x88\x01\x01\x12I\n" +
	"\x12misc_value_oh_base\x18y \x01(\v2\x17.inventory.DecimalValueHxR\x0fmiscValueOhBase\x88\x01\x01\x12K\n" +
	"\x13surch_value_oh_base\x18z \x01(\v2\x17.inventory.DecimalValueHyR\x10surchValueOhBase\x88\x01\x01\x12K\n" +
	"\x13total_value_oh_base\x18{ \x01(\v2\x17.inventory.DecimalValueHzR\x10totalValueOhBase\x88\x01\x01\x12O\n" +
	"\x15matl_value_oh_display\x18| \x01(\v2\x17.inventory.DecimalValueH{R\x12matlValueOhDisplay\x88\x01\x01\x12Q\n" +
	"\x16trans_value_oh_display\x18} \x01(\v2\x17.inventory.DecimalValueH|R\x13transValueOhDisplay\x88\x01\x01\x12O\n" +
	"\x15prdn_value_oh_display\x18~ \x01(\v2\x17.inventory.DecimalValueH}R\x12prdnValueOhDisplay\x88\x01\x01\x12O\n" +
	"\x15misc_value_oh_display\x18\x7f \x01(\v2\x17.inventory.DecimalValueH~R\x12miscValueOhDisplay\x88\x01\x01\x12R\n" +
	"\x16surch_value_oh_display\x18\x80\x01 \x01(\v2\x17.inventory.DecimalValueH\x7fR\x13surchValueOhDisplay\x88\x01\x01\x12S\n" +
	"\x16total_value_oh_display\x18\x81\x01 \x01(\v2\x17.inventory.DecimalValueH\x80\x01R\x13totalValueOhDisplay\x88\x01\x01\x12Q\n" +
	"\x15matl_value_alloc_base\x18\x82\x01 \x01(\v2\x17.inventory.DecimalValueH\x81\x01R\x12matlValueAllocBase\x88\x01\x01\x12S\n" +
	"\x16trans_value_alloc_base\x18\x83\x01 \x01(\v2\x17.inventory.DecimalValueH\x82\x01R\x13transValueAllocBase\x88\x01\x01\x12Q\n" +
	"\x15prdn_value_alloc_base\x18\x84\x01 \x01(\v2\x17.inventory.DecimalValueH\x83\x01R\x12prdnValueAllocBase\x88\x01\x01\x12Q\n" +
	"\x15misc_value_alloc_base\x18\x85\x01 \x01(\v2\x17.inventory.DecimalValueH\x84\x01R\x12miscValueAllocBase\x88\x01\x01\x12S\n" +
	"\x16surch_value_alloc_base\x18\x86\x01 \x01(\v2\x17.inventory.DecimalValueH\x85\x01R\x13surchValueAllocBase\x88\x01\x01\x12S\n" +
	"\x16total_value_alloc_base\x18\x87\x01 \x01(\v2\x17.inventory.DecimalValueH\x86\x01R\x13totalValueAllocBase\x88\x01\x01\x12W\n" +
	"\x18matl_value_alloc_display\x18\x88\x01 \x01(\v2\x17.inventory.DecimalValueH\x87\x01R\x15matlValueAllocDisplay\x88\x01\x01\x12Y\n" +
	"\x19trans_value_alloc_display\x18\x89\x01 \x01(\v2\x17.inventory.DecimalValueH\x88\x01R\x16transValueAllocDisplay\x88\x01\x01\x12W\n" +
	"\x18prdn_value_alloc_display\x18\x8a\x01 \x01(\v2\x17.inventory.DecimalValueH\x89\x01R\x15prdnValueAllocDisplay\x88\x01\x01\x12W\n" +
	"\x18misc_value_alloc_display\x18\x8b\x01 \x01(\v2\x17.inventory.DecimalValueH\x8a\x01R\x15miscValueAllocDisplay\x88\x01\x01\x12Y\n" +
	"\x19surch_value_alloc_display\x18\x8c\x01 \x01(\v2\x17.inventory.DecimalValueH\x8b\x01R\x16surchValueAllocDisplay\x88\x01\x01\x12Y\n" +
	"\x19total_value_alloc_display\x18\x8d\x01 \x01(\v2\x17.inventory.DecimalValueH\x8c\x01R\x16totalValueAllocDisplay\x88\x01\x01\x12M\n" +
	"\x13matl_value_avl_base\x18\x8e\x01 \x01(\v2\x17.inventory.DecimalValueH\x8d\x01R\x10matlValueAvlBase\x88\x01\x01\x12O\n" +
	"\x14trans_value_avl_base\x18\x8f\x01 \x01(\v2\x17.inventory.DecimalValueH\x8e\x01R\x11transValueAvlBase\x88\x01\x01\x12M\n" +
	"\x13prdn_value_avl_base\x18\x90\x01 \x01(\v2\x17.inventory.DecimalValueH\x8f\x01R\x10prdnValueAvlBase\x88\x01\x01\x12M\n" +
	"\x13misc_value_avl_base\x18\x91\x01 \x01(\v2\x17.inventory.DecimalValueH\x90\x01R\x10miscValueAvlBase\x88\x01\x01\x12O\n" +
	"\x14surch_value_avl_base\x18\x92\x01 \x01(\v2\x17.inventory.DecimalValueH\x91\x01R\x11surchValueAvlBase\x88\x01\x01\x12O\n" +
	"\x14total_value_avl_base\x18\x93\x01 \x01(\v2\x17.inventory.DecimalValueH\x92\x01R\x11totalValueAvlBase\x88\x01\x01\x12S\n" +
	"\x16matl_value_avl_display\x18\x94\x01 \x01(\v2\x17.inventory.DecimalValueH\x93\x01R\x13matlValueAvlDisplay\x88\x01\x01\x12U\n" +
	"\x17trans_value_avl_display\x18\x95\x01 \x01(\v2\x17.inventory.DecimalValueH\x94\x01R\x14transValueAvlDisplay\x88\x01\x01\x12S\n" +
	"\x16prdn_value_avl_display\x18\x96\x01 \x01(\v2\x17.inventory.DecimalValueH\x95\x01R\x13prdnValueAvlDisplay\x88\x01\x01\x12S\n" +
	"\x16misc_value_avl_display\x18\x97\x01 \x01(\v2\x17.inventory.DecimalValueH\x96\x01R\x13miscValueAvlDisplay\x88\x01\x01\x12U\n" +
	"\x17surch_value_avl_display\x18\x98\x01 \x01(\v2\x17.inventory.DecimalValueH\x97\x01R\x14surchValueAvlDisplay\x88\x01\x01\x12U\n" +
	"\x17total_value_avl_display\x18\x99\x01 \x01(\v2\x17.inventory.DecimalValueH\x98\x01R\x14totalValueAvlDisplay\x88\x01\x01\x12+\n" +
	"\x0epo_pcs_ordered\x18\x9a\x01 \x01(\x05H\x99\x01R\fpoPcsOrdered\x88\x01\x01\x12'\n" +
	"\fpo_pcs_alloc\x18\x9b\x01 \x01(\x05H\x9a\x01R\n" +
	"poPcsAlloc\x88\x01\x01\x12/\n" +
	"\x10po_pcs_delivered\x18\x9c\x01 \x01(\x05H\x9b\x01R\x0epoPcsDelivered\x88\x01\x01\x12D\n" +
	"\x0epo_pcs_balance\x18\x9d\x01 \x01(\v2\x17.inventory.DecimalValueH\x9c\x01R\fpoPcsBalance\x88\x01\x01\x12D\n" +
	"\x0epo_qty_ordered\x18\x9e\x01 \x01(\v2\x17.inventory.DecimalValueH\x9d\x01R\fpoQtyOrdered\x88\x01\x01\x12H\n" +
	"\x10po_qty_allocated\x18\x9f\x01 \x01(\v2\x17.inventory.DecimalValueH\x9e\x01R\x0epoQtyAllocated\x88\x01\x01\x12H\n" +
	"\x10po_qty_delivered\x18\xa0\x01 \x01(\v2\x17.inventory.DecimalValueH\x9f\x01R\x0epoQtyDelivered\x88\x01\x01\x12D\n" +
	"\x0epo_qty_balance\x18\xa1\x01 \x01(\v2\x17.inventory.DecimalValueH\xa0\x01R\fpoQtyBalance\x88\x01\x01\x12M\n" +
	"\x13po_wgt_ordered_base\x18\xa2\x01 \x01(\v2\x17.inventory.DecimalValueH\xa1\x01R\x10poWgtOrderedBase\x88\x01\x01\x12S\n" +
	"\x16po_wgt_ordered_display\x18\xa3\x01 \x01(\v2\x17.inventory.DecimalValueH\xa2\x01R\x13poWgtOrderedDisplay\x88\x01\x01\x12I\n" +
	"\x11po_wgt_alloc_base\x18\xa4\x01 \x01(\v2\x17.inventory.DecimalValueH\xa3\x01R\x0epoWgtAllocBase\x88\x01\x01\x12O\n" +
	"\x14po_wgt_alloc_display\x18\xa5\x01 \x01(\v2\x17.inventory.DecimalValueH\xa4\x01R\x11poWgtAllocDisplay\x88\x01\x01\x12Q\n" +
	"\x15po_wgt_delivered_base\x18\xa6\x01 \x01(\v2\x17.inventory.DecimalValueH\xa5\x01R\x12poWgtDeliveredBase\x88\x01\x01\x12W\n" +
	"\x18po_wgt_delivered_display\x18\xa7\x01 \x01(\v2\x17.inventory.DecimalValueH\xa6\x01R\x15poWgtDeliveredDisplay\x88\x01\x01\x12M\n" +
	"\x13po_wgt_balance_base\x18\xa8\x01 \x01(\v2\x17.inventory.DecimalValueH\xa7\x01R\x10poWgtBalanceBase\x88\x01\x01B\a\n" +
	"\x05_coidB\x12\n" +
	"\x10_ex_rate_summaryB\t\n" +
	"\a_branchB\x0e\n" +
	"\f_stk_item_idB\x0f\n" +
	"\r_product_codeB\x13\n" +
	"\x11_product_categoryB\x0f\n" +
	"\r_product_sizeB\x14\n" +
	"\x12_product_conditionB\x10\n" +
	"\x0e_product_gradeB\x0f\n" +
	"\r_product_specB\x13\n" +
	"\x11_outside_diameterB\x12\n" +
	"\x10_inside_diameterB\v\n" +
	"\t_theo_wgtB\x14\n" +
	"\x12_theo_wgt_per_footB\a\n" +
	"\x05_millB\x19\n" +
	"\x17_country_of_matl_originB\a\n" +
	"\x05_heatB\v\n" +
	"\t_whs_codeB\v\n" +
	"\t_whs_nameB\t\n" +
	"\a_whs_buB\r\n" +
	"\v_bu_countryB\r\n" +
	"\v_parent_whsB\r\n" +
	"\v_master_whsB\x06\n" +
	"\x04_tagB\r\n" +
	"\v_parent_tagB\r\n" +
	"\v_master_tagB\x10\n" +
	"\x0e_stk_hold_codeB\x12\n" +
	"\x10_stk_hold_reasonB\x10\n" +
	"\x0e_stk_hold_userB\x10\n" +
	"\x0e_stk_hold_descB\x10\n" +
	"\x0e_stk_hold_dateB\x12\n" +
	"\x10_customer_numberB\x10\n" +
	"\x0e_customer_nameB\x0e\n" +
	"\f_part_numberB\x0f\n" +
	"\r_stk_locationB\x0e\n" +
	"\f_stk_remarksB\x10\n" +
	"\x0e_reject_reasonB\x0e\n" +
	"\f_reject_descB\x11\n" +
	"\x0f_transient_typeB\x10\n" +
	"\x0e_transient_refB\x10\n" +
	"\x0e_stk_ownershipB\x16\n" +
	"\x14_for_customer_numberB\x14\n" +
	"\x12_for_customer_nameB\r\n" +
	"\v_stk_statusB\x11\n" +
	"\x0f_product_statusB\r\n" +
	"\v_test_spec1B\f\n" +
	"\n" +
	"_po_numberB\n" +
	"\n" +
	"\b_po_itemB\x0f\n" +
	"\r_product_descB\x14\n" +
	"\x12_product_size_descB\r\n" +
	"\v_metal_typeB\x0e\n" +
	"\f_metal_type2B\x15\n" +
	"\x13_created_ref_prefixB\x11\n" +
	"\x0f_created_ref_noB\x13\n" +
	"\x11_created_ref_itemB\f\n" +
	"\n" +
	"_vendor_noB\x0e\n" +
	"\f_vendor_nameB\x0e\n" +
	"\f_po_categoryB\x13\n" +
	"\x11_po_category_descB\n" +
	"\n" +
	"\b_po_typeB\x0f\n" +
	"\r_po_type_descB\v\n" +
	"\t_whs_typeB\x10\n" +
	"\x0e_whs_type_descB\x0f\n" +
	"\r_supplier_refB\x18\n" +
	"\x16_product_controls_codeB\x18\n" +
	"\x16_product_controls_descB\b\n" +
	"\x06_batchB\v\n" +
	"\t_cus_specB\x13\n" +
	"\x11_treatment_numberB\x0f\n" +
	"\r_other_numberB\x11\n" +
	"\x0f_spec_conditionB\x06\n" +
	"\x04_abcB\x13\n" +
	"\x11_mill_heat_lot_noB\r\n" +
	"\v_strat_rankB\x15\n" +
	"\x13_product_super_itemB\t\n" +
	"\a_lengthB\f\n" +
	"\n" +
	"_length_ohB\x0f\n" +
	"\r_length_allocB\r\n" +
	"\v_length_avlB\x0e\n" +
	"\f_wgt_oh_baseB\x11\n" +
	"\x0f_wgt_alloc_baseB\x0f\n" +
	"\r_wgt_avl_baseB\x11\n" +
	"\x0f_wgt_oh_displayB\x14\n" +
	"\x12_wgt_alloc_displayB\x12\n" +
	"\x10_wgt_avl_displayB\t\n" +
	"\a_pcs_ohB\f\n" +
	"\n" +
	"_pcs_allocB\n" +
	"\n" +
	"\b_pcs_avlB\t\n" +
	"\a_qty_ohB\f\n" +
	"\n" +
	"_qty_allocB\n" +
	"\n" +
	"\b_qty_avlB\x12\n" +
	"\x10_unit_value_baseB\x15\n" +
	"\x13_unit_value_displayB\x16\n" +
	"\x14_orig_matl_cost_baseB\x16\n" +
	"\x14_orig_prdn_cost_baseB\x16\n" +
	"\x14_orig_frgt_cost_baseB\x16\n" +
	"\x14_orig_misc_cost_baseB\x17\n" +
	"\x15_orig_surch_cost_baseB\x1a\n" +
	"\x18_orig_total_cost_oh_baseB\x19\n" +
	"\x17_orig_matl_cost_displayB\x19\n" +
	"\x17_orig_prdn_cost_displayB\x19\n" +
	"\x17_orig_frgt_cost_displayB\x19\n" +
	"\x17_orig_misc_cost_displayB\x1a\n" +
	"\x18_orig_surch_cost_displayB\x1a\n" +
	"\x18_orig_total_cost_displayB\x19\n" +
	"\x17_matl_cost_per_wgt_baseB\x19\n" +
	"\x17_prdn_cost_per_wgt_baseB\x1a\n" +
	"\x18_trans_cost_per_wgt_baseB\x19\n" +
	"\x17_misc_cost_per_wgt_baseB\x1a\n" +
	"\x18_surch_cost_per_wgt_baseB\x1a\n" +
	"\x18_total_cost_per_wgt_baseB\x1c\n" +
	"\x1a_matl_cost_per_wgt_displayB\x1c\n" +
	"\x1a_prdn_cost_per_wgt_displayB\x1d\n" +
	"\x1b_trans_cost_per_wgt_displayB\x1c\n" +
	"\x1a_misc_cost_per_wgt_displayB\x1d\n" +
	"\x1b_surch_cost_per_wgt_displayB\x1d\n" +
	"\x1b_total_cost_per_wgt_displayB\x15\n" +
	"\x13_matl_value_oh_baseB\x16\n" +
	"\x14_trans_value_oh_baseB\x15\n" +
	"\x13_prdn_value_oh_baseB\x15\n" +
	"\x13_misc_value_oh_baseB\x16\n" +
	"\x14_surch_value_oh_baseB\x16\n" +
	"\x14_total_value_oh_baseB\x18\n" +
	"\x16_matl_value_oh_displayB\x19\n" +
	"\x17_trans_value_oh_displayB\x18\n" +
	"\x16_prdn_value_oh_displayB\x18\n" +
	"\x16_misc_value_oh_displayB\x19\n" +
	"\x17_surch_value_oh_displayB\x19\n" +
	"\x17_total_value_oh_displayB\x18\n" +
	"\x16_matl_value_alloc_baseB\x19\n" +
	"\x17_trans_value_alloc_baseB\x18\n" +
	"\x16_prdn_value_alloc_baseB\x18\n" +
	"\x16_misc_value_alloc_baseB\x19\n" +
	"\x17_surch_value_alloc_baseB\x19\n" +
	"\x17_total_value_alloc_baseB\x1b\n" +
	"\x19_matl_value_alloc_displayB\x1c\n" +
	"\x1a_trans_value_alloc_displayB\x1b\n" +
	"\x19_prdn_value_alloc_displayB\x1b\n" +
	"\x19_misc_value_alloc_displayB\x1c\n" +
	"\x1a_surch_value_alloc_displayB\x1c\n" +
	"\x1a_total_value_alloc_displayB\x16\n" +
	"\x14_matl_value_avl_baseB\x17\n" +
	"\x15_trans_value_avl_baseB\x16\n" +
	"\x14_prdn_value_avl_baseB\x16\n" +
	"\x14_misc_value_avl_baseB\x17\n" +
	"\x15_surch_value_avl_baseB\x17\n" +
	"\x15_total_value_avl_baseB\x19\n" +
	"\x17_matl_value_avl_displayB\x1a\n" +
	"\x18_trans_value_avl_displayB\x19\n" +
	"\x17_prdn_value_avl_displayB\x19\n" +
	"\x17_misc_value_avl_displayB\x1a\n" +
	"\x18_surch_value_avl_displayB\x1a\n" +
	"\x18_total_value_avl_displayB\x11\n" +
	"\x0f_po_pcs_orderedB\x0f\n" +
	"\r_po_pcs_allocB\x13\n" +
	"\x11_po_pcs_deliveredB\x11\n" +
	"\x0f_po_pcs_balanceB\x11\n" +
	"\x0f_po_qty_orderedB\x13\n" +
	"\x11_po_qty_allocatedB\x13\n" +
	"\x11_po_qty_deliveredB\x11\n" +
	"\x0f_po_qty_balanceB\x16\n" +
	"\x14_po_wgt_ordered_baseB\x19\n" +
	"\x17_po_wgt_ordered_displayB\x14\n" +
	"\x12_po_wgt_alloc_baseB\x17\n" +
	"\x15_po_wgt_alloc_displayB\x18\n" +
	"\x16_po_wgt_delivered_baseB\x1b\n" +
	"\x19_po_wgt_delivered_displayB\x16\n" +
	"\x14_po_wgt_balance_base2]\n" +
	"\x10InventoryService\x12I\n" +
	"\fGetInventory\x12\x1b.inventory.InventoryRequest\x1a\x1a.inventory.InventoryResult\"\x00B8Z6github.com/howcoWeb/grpServiceUsingGo/protos.inventoryb\x06proto3"

var (
	file_inventoryRequest_proto_rawDescOnce sync.Once
	file_inventoryRequest_proto_rawDescData []byte
)

func file_inventoryRequest_proto_rawDescGZIP() []byte {
	file_inventoryRequest_proto_rawDescOnce.Do(func() {
		file_inventoryRequest_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_inventoryRequest_proto_rawDesc), len(file_inventoryRequest_proto_rawDesc)))
	})
	return file_inventoryRequest_proto_rawDescData
}

var file_inventoryRequest_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_inventoryRequest_proto_goTypes = []any{
	(*InventoryRequest)(nil),   // 0: inventory.InventoryRequest
	(*WarehouseListValue)(nil), // 1: inventory.WarehouseListValue
	(*InventoryResult)(nil),    // 2: inventory.InventoryResult
	(*Date)(nil),               // 3: inventory.Date
	(*DecimalValue)(nil),       // 4: inventory.DecimalValue
	(*InventoryItem)(nil),      // 5: inventory.InventoryItem
}
var file_inventoryRequest_proto_depIdxs = []int32{
	1,  // 0: inventory.InventoryRequest.warehouses:type_name -> inventory.WarehouseListValue
	3,  // 1: inventory.InventoryRequest.receivedDateMin:type_name -> inventory.Date
	3,  // 2: inventory.InventoryRequest.receivedDateMax:type_name -> inventory.Date
	5,  // 3: inventory.InventoryResult.items:type_name -> inventory.InventoryItem
	4,  // 4: inventory.InventoryItem.outside_diameter:type_name -> inventory.DecimalValue
	4,  // 5: inventory.InventoryItem.inside_diameter:type_name -> inventory.DecimalValue
	4,  // 6: inventory.InventoryItem.theo_wgt:type_name -> inventory.DecimalValue
	4,  // 7: inventory.InventoryItem.theo_wgt_per_foot:type_name -> inventory.DecimalValue
	3,  // 8: inventory.InventoryItem.stk_hold_date:type_name -> inventory.Date
	4,  // 9: inventory.InventoryItem.created_ref_item:type_name -> inventory.DecimalValue
	4,  // 10: inventory.InventoryItem.length:type_name -> inventory.DecimalValue
	4,  // 11: inventory.InventoryItem.length_oh:type_name -> inventory.DecimalValue
	4,  // 12: inventory.InventoryItem.length_alloc:type_name -> inventory.DecimalValue
	4,  // 13: inventory.InventoryItem.length_avl:type_name -> inventory.DecimalValue
	4,  // 14: inventory.InventoryItem.wgt_oh_base:type_name -> inventory.DecimalValue
	4,  // 15: inventory.InventoryItem.wgt_alloc_base:type_name -> inventory.DecimalValue
	4,  // 16: inventory.InventoryItem.wgt_avl_base:type_name -> inventory.DecimalValue
	4,  // 17: inventory.InventoryItem.wgt_oh_display:type_name -> inventory.DecimalValue
	4,  // 18: inventory.InventoryItem.wgt_alloc_display:type_name -> inventory.DecimalValue
	4,  // 19: inventory.InventoryItem.wgt_avl_display:type_name -> inventory.DecimalValue
	4,  // 20: inventory.InventoryItem.qty_oh:type_name -> inventory.DecimalValue
	4,  // 21: inventory.InventoryItem.qty_alloc:type_name -> inventory.DecimalValue
	4,  // 22: inventory.InventoryItem.qty_avl:type_name -> inventory.DecimalValue
	4,  // 23: inventory.InventoryItem.unit_value_base:type_name -> inventory.DecimalValue
	4,  // 24: inventory.InventoryItem.unit_value_display:type_name -> inventory.DecimalValue
	4,  // 25: inventory.InventoryItem.orig_matl_cost_base:type_name -> inventory.DecimalValue
	4,  // 26: inventory.InventoryItem.orig_prdn_cost_base:type_name -> inventory.DecimalValue
	4,  // 27: inventory.InventoryItem.orig_frgt_cost_base:type_name -> inventory.DecimalValue
	4,  // 28: inventory.InventoryItem.orig_misc_cost_base:type_name -> inventory.DecimalValue
	4,  // 29: inventory.InventoryItem.orig_surch_cost_base:type_name -> inventory.DecimalValue
	4,  // 30: inventory.InventoryItem.orig_total_cost_oh_base:type_name -> inventory.DecimalValue
	4,  // 31: inventory.InventoryItem.orig_matl_cost_display:type_name -> inventory.DecimalValue
	4,  // 32: inventory.InventoryItem.orig_prdn_cost_display:type_name -> inventory.DecimalValue
	4,  // 33: inventory.InventoryItem.orig_frgt_cost_display:type_name -> inventory.DecimalValue
	4,  // 34: inventory.InventoryItem.orig_misc_cost_display:type_name -> inventory.DecimalValue
	4,  // 35: inventory.InventoryItem.orig_surch_cost_display:type_name -> inventory.DecimalValue
	4,  // 36: inventory.InventoryItem.orig_total_cost_display:type_name -> inventory.DecimalValue
	4,  // 37: inventory.InventoryItem.matl_cost_per_wgt_base:type_name -> inventory.DecimalValue
	4,  // 38: inventory.InventoryItem.prdn_cost_per_wgt_base:type_name -> inventory.DecimalValue
	4,  // 39: inventory.InventoryItem.trans_cost_per_wgt_base:type_name -> inventory.DecimalValue
	4,  // 40: inventory.InventoryItem.misc_cost_per_wgt_base:type_name -> inventory.DecimalValue
	4,  // 41: inventory.InventoryItem.surch_cost_per_wgt_base:type_name -> inventory.DecimalValue
	4,  // 42: inventory.InventoryItem.total_cost_per_wgt_base:type_name -> inventory.DecimalValue
	4,  // 43: inventory.InventoryItem.matl_cost_per_wgt_display:type_name -> inventory.DecimalValue
	4,  // 44: inventory.InventoryItem.prdn_cost_per_wgt_display:type_name -> inventory.DecimalValue
	4,  // 45: inventory.InventoryItem.trans_cost_per_wgt_display:type_name -> inventory.DecimalValue
	4,  // 46: inventory.InventoryItem.misc_cost_per_wgt_display:type_name -> inventory.DecimalValue
	4,  // 47: inventory.InventoryItem.surch_cost_per_wgt_display:type_name -> inventory.DecimalValue
	4,  // 48: inventory.InventoryItem.total_cost_per_wgt_display:type_name -> inventory.DecimalValue
	4,  // 49: inventory.InventoryItem.matl_value_oh_base:type_name -> inventory.DecimalValue
	4,  // 50: inventory.InventoryItem.trans_value_oh_base:type_name -> inventory.DecimalValue
	4,  // 51: inventory.InventoryItem.prdn_value_oh_base:type_name -> inventory.DecimalValue
	4,  // 52: inventory.InventoryItem.misc_value_oh_base:type_name -> inventory.DecimalValue
	4,  // 53: inventory.InventoryItem.surch_value_oh_base:type_name -> inventory.DecimalValue
	4,  // 54: inventory.InventoryItem.total_value_oh_base:type_name -> inventory.DecimalValue
	4,  // 55: inventory.InventoryItem.matl_value_oh_display:type_name -> inventory.DecimalValue
	4,  // 56: inventory.InventoryItem.trans_value_oh_display:type_name -> inventory.DecimalValue
	4,  // 57: inventory.InventoryItem.prdn_value_oh_display:type_name -> inventory.DecimalValue
	4,  // 58: inventory.InventoryItem.misc_value_oh_display:type_name -> inventory.DecimalValue
	4,  // 59: inventory.InventoryItem.surch_value_oh_display:type_name -> inventory.DecimalValue
	4,  // 60: inventory.InventoryItem.total_value_oh_display:type_name -> inventory.DecimalValue
	4,  // 61: inventory.InventoryItem.matl_value_alloc_base:type_name -> inventory.DecimalValue
	4,  // 62: inventory.InventoryItem.trans_value_alloc_base:type_name -> inventory.DecimalValue
	4,  // 63: inventory.InventoryItem.prdn_value_alloc_base:type_name -> inventory.DecimalValue
	4,  // 64: inventory.InventoryItem.misc_value_alloc_base:type_name -> inventory.DecimalValue
	4,  // 65: inventory.InventoryItem.surch_value_alloc_base:type_name -> inventory.DecimalValue
	4,  // 66: inventory.InventoryItem.total_value_alloc_base:type_name -> inventory.DecimalValue
	4,  // 67: inventory.InventoryItem.matl_value_alloc_display:type_name -> inventory.DecimalValue
	4,  // 68: inventory.InventoryItem.trans_value_alloc_display:type_name -> inventory.DecimalValue
	4,  // 69: inventory.InventoryItem.prdn_value_alloc_display:type_name -> inventory.DecimalValue
	4,  // 70: inventory.InventoryItem.misc_value_alloc_display:type_name -> inventory.DecimalValue
	4,  // 71: inventory.InventoryItem.surch_value_alloc_display:type_name -> inventory.DecimalValue
	4,  // 72: inventory.InventoryItem.total_value_alloc_display:type_name -> inventory.DecimalValue
	4,  // 73: inventory.InventoryItem.matl_value_avl_base:type_name -> inventory.DecimalValue
	4,  // 74: inventory.InventoryItem.trans_value_avl_base:type_name -> inventory.DecimalValue
	4,  // 75: inventory.InventoryItem.prdn_value_avl_base:type_name -> inventory.DecimalValue
	4,  // 76: inventory.InventoryItem.misc_value_avl_base:type_name -> inventory.DecimalValue
	4,  // 77: inventory.InventoryItem.surch_value_avl_base:type_name -> inventory.DecimalValue
	4,  // 78: inventory.InventoryItem.total_value_avl_base:type_name -> inventory.DecimalValue
	4,  // 79: inventory.InventoryItem.matl_value_avl_display:type_name -> inventory.DecimalValue
	4,  // 80: inventory.InventoryItem.trans_value_avl_display:type_name -> inventory.DecimalValue
	4,  // 81: inventory.InventoryItem.prdn_value_avl_display:type_name -> inventory.DecimalValue
	4,  // 82: inventory.InventoryItem.misc_value_avl_display:type_name -> inventory.DecimalValue
	4,  // 83: inventory.InventoryItem.surch_value_avl_display:type_name -> inventory.DecimalValue
	4,  // 84: inventory.InventoryItem.total_value_avl_display:type_name -> inventory.DecimalValue
	4,  // 85: inventory.InventoryItem.po_pcs_balance:type_name -> inventory.DecimalValue
	4,  // 86: inventory.InventoryItem.po_qty_ordered:type_name -> inventory.DecimalValue
	4,  // 87: inventory.InventoryItem.po_qty_allocated:type_name -> inventory.DecimalValue
	4,  // 88: inventory.InventoryItem.po_qty_delivered:type_name -> inventory.DecimalValue
	4,  // 89: inventory.InventoryItem.po_qty_balance:type_name -> inventory.DecimalValue
	4,  // 90: inventory.InventoryItem.po_wgt_ordered_base:type_name -> inventory.DecimalValue
	4,  // 91: inventory.InventoryItem.po_wgt_ordered_display:type_name -> inventory.DecimalValue
	4,  // 92: inventory.InventoryItem.po_wgt_alloc_base:type_name -> inventory.DecimalValue
	4,  // 93: inventory.InventoryItem.po_wgt_alloc_display:type_name -> inventory.DecimalValue
	4,  // 94: inventory.InventoryItem.po_wgt_delivered_base:type_name -> inventory.DecimalValue
	4,  // 95: inventory.InventoryItem.po_wgt_delivered_display:type_name -> inventory.DecimalValue
	4,  // 96: inventory.InventoryItem.po_wgt_balance_base:type_name -> inventory.DecimalValue
	0,  // 97: inventory.InventoryService.GetInventory:input_type -> inventory.InventoryRequest
	2,  // 98: inventory.InventoryService.GetInventory:output_type -> inventory.InventoryResult
	98, // [98:99] is the sub-list for method output_type
	97, // [97:98] is the sub-list for method input_type
	97, // [97:97] is the sub-list for extension type_name
	97, // [97:97] is the sub-list for extension extendee
	0,  // [0:97] is the sub-list for field type_name
}

func init() { file_inventoryRequest_proto_init() }
func file_inventoryRequest_proto_init() {
	if File_inventoryRequest_proto != nil {
		return
	}
	file_inventoryRequest_proto_msgTypes[0].OneofWrappers = []any{}
	file_inventoryRequest_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_inventoryRequest_proto_rawDesc), len(file_inventoryRequest_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inventoryRequest_proto_goTypes,
		DependencyIndexes: file_inventoryRequest_proto_depIdxs,
		MessageInfos:      file_inventoryRequest_proto_msgTypes,
	}.Build()
	File_inventoryRequest_proto = out.File
	file_inventoryRequest_proto_goTypes = nil
	file_inventoryRequest_proto_depIdxs = nil
}
